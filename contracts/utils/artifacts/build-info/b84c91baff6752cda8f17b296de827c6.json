{
	"id": "b84c91baff6752cda8f17b296de827c6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"metadata": {
				"useLiteralContent": true
			},
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"id",
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"evmVersion": "byzantium"
		},
		"sources": {
			"contracts/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"../utils/Context.sol\";\r\nimport \"../interfaces/IERC20.sol\";\r\nimport \"../interfaces/IERC20Metadata.sol\";\r\nimport \"../libraries/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        _name = \"SwishFish\";\r\n        _symbol = \"SFH\";\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender).add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance.sub(subtractedValue));\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance.sub(amount);\r\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n        // decrementing then incrementing.\r\n        _balances[to] = _balances[to].add(amount);\r\n    }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n    unchecked {\r\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = _balances[account].sub(amount);\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply = _totalSupply.sub(amount);\r\n        }\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance.sub(amount));\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
			},
			"libraries/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
			},
			"interfaces/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
			},
			"interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			},
			"utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_2, callvalue)\n  tag_4\n    /* \"contracts/ERC20.sol\":2136:2155  _name = \"SwishFish\" */\n  0x03\n    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  sload\n  tag_1\n  jump\t// in\ntag_4:\n  0x1f\n  dup2\n  gt\n  tag_5\n  jumpi\ntag_6:\n  pop\n  0x5377697368466973680000000000000000000000000000000000000000000012\n    /* \"contracts/ERC20.sol\":2136:2155  _name = \"SwishFish\" */\n  0x03\n    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  sstore\n    /* \"contracts/ERC20.sol\":2166:2181  _symbol = \"SFH\" */\n  0x04\n    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  sload\n  tag_7\n  swap1\n  tag_1\n  jump\t// in\ntag_7:\n  0x1f\n  dup2\n  gt\n  tag_8\n  jumpi\ntag_9:\n  0x5346480000000000000000000000000000000000000000000000000000000006\n    /* \"contracts/ERC20.sol\":2166:2181  _symbol = \"SFH\" */\n  0x04\n    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  sstore\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_8:\n  0x00\n  swap1\n    /* \"contracts/ERC20.sol\":2166:2181  _symbol = \"SFH\" */\n  0x04\n    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dup3\n  mstore\n  0x20\n  0x1f\n  dup2\n  dup5\n  keccak256\n  swap3\n  add\n  div\n  dup2\n  add\n  swap1\ntag_10:\n  dup2\n  dup2\n  lt\n  tag_11\n  jumpi\n  pop\n  pop\n  jump(tag_9)\ntag_11:\n  dup3\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_10)\ntag_5:\n  0x00\n  swap1\n    /* \"contracts/ERC20.sol\":2136:2155  _name = \"SwishFish\" */\n  0x03\n    /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dup3\n  mstore\n  0x20\n  0x1f\n  dup2\n  dup5\n  keccak256\n  swap3\n  add\n  div\n  dup2\n  add\n  swap1\ntag_13:\n  dup2\n  dup2\n  lt\n  tag_14\n  jumpi\n  pop\n  pop\n  jump(tag_6)\ntag_14:\n  dup3\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_13)\ntag_2:\n  0x00\n  dup1\n  revert\ntag_1:\n  swap1\n  0x01\n  0x02\n  dup4\n  div\n  swap3\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\ntag_17:\n  0x20\n  dup4\n  lt\n  eq\n  tag_18\n  jumpi\n  jump\t// out\ntag_18:\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_16:\n  swap2\n  0x7f\n  and\n  swap2\n  jump(tag_17)\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      0x80\n      0x40\n      dup2\n      dup2\n      mstore\n      0x04\n      swap2\n      dup3\n      calldatasize\n      lt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      0x00\n      swap3\n      0x0100000000000000000000000000000000000000000000000000000000\n      dup5\n      calldataload\n      div\n      swap2\n      dup3\n      0x06fdde03\n      eq\n      tag_12\n      jumpi\n      pop\n      dup2\n      0x095ea7b3\n      eq\n      tag_14\n      jumpi\n      dup2\n      0x18160ddd\n      eq\n      tag_16\n      jumpi\n      dup2\n      0x23b872dd\n      eq\n      tag_18\n      jumpi\n      dup2\n      0x313ce567\n      eq\n      tag_20\n      jumpi\n      dup2\n      0x39509351\n      eq\n      tag_22\n      jumpi\n      dup2\n      0x70a08231\n      eq\n      tag_24\n      jumpi\n      dup2\n      0x95d89b41\n      eq\n      tag_26\n      jumpi\n      dup2\n      0xa457c2d7\n      eq\n      tag_28\n      jumpi\n      pop\n      dup1\n      0xa9059cbb\n      eq\n      tag_30\n      jumpi\n      0xdd62ed3e\n      eq\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      jumpi(tag_36, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n      dup1\n      0x20\n      swap3\n      tag_38\n      tag_2\n      jump\t// in\n    tag_38:\n      tag_39\n      tag_3\n      jump\t// in\n    tag_39:\n      sub(exp(0x02, 0xa0), 0x01)\n      swap2\n      dup3\n      and\n      dup4\n      mstore\n        /* \"contracts/ERC20.sol\":4255:4266  _allowances */\n      0x01\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup7\n      mstore\n      dup4\n      dup4\n      keccak256\n      swap2\n      and\n      dup3\n      mstore\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_36:\n      pop\n      dup1\n      revert\n    tag_30:\n      pop\n      jumpi(tag_36, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n      0x20\n      swap1\n        /* \"contracts/ERC20.sol\":4039:4045  amount */\n      tag_44\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_45\n      tag_2\n      jump\t// in\n    tag_45:\n      calldataload(0x24)\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      swap1\n      caller\n        /* \"contracts/ERC20.sol\":4039:4045  amount */\n      tag_6\n      jump\t// in\n    tag_44:\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mload\n      0x01\n      dup2\n      mstore\n      return\n    tag_28:\n      dup4\n      swap2\n      pop\n      jumpi(tag_36, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n      tag_50\n      tag_2\n      jump\t// in\n    tag_50:\n      swap2\n      dup4\n      calldataload(0x24)\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      swap2\n      caller\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n      sub(exp(0x02, 0xa0), 0x01)\n      dup7\n      and\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"contracts/ERC20.sol\":7059:7094  currentAllowance >= subtractedValue */\n      swap2\n      dup2\n      dup4\n      lt\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_51\n      jumpi\n      0x20\n      dup6\n        /* \"contracts/ERC20.sol\":7189:7226  currentAllowance.sub(subtractedValue) */\n      tag_44\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup7\n        /* \"libraries/SafeMath.sol\":1036:1079  sub(a, b, \"SafeMath: subtraction overflow\") */\n      tag_54\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup8\n      dup8\n      dup6\n      mload\n      swap2\n      tag_55\n      dup4\n      tag_4\n      jump\t// in\n    tag_55:\n      0x1e\n      dup4\n      mstore\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup9\n      dup5\n      add\n      mstore\n        /* \"libraries/SafeMath.sol\":1036:1079  sub(a, b, \"SafeMath: subtraction overflow\") */\n      tag_9\n      jump\t// in\n    tag_54:\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      swap1\n      caller\n        /* \"contracts/ERC20.sol\":7189:7226  currentAllowance.sub(subtractedValue) */\n      tag_7\n      jump\t// in\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_51:\n      0x84\n      swap1\n      0x20\n      dup7\n      mload\n      swap2\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n      0x44\n      dup3\n      add\n      mstore\n      0x207a65726f000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_26:\n      swap2\n      swap1\n      pop\n      jumpi(tag_58, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_58\n      jumpi\n      dup1\n      mload\n      swap2\n      dup4\n      dup2\n      sload\n      swap2\n      0x02\n      dup4\n      div\n      swap2\n      0x01\n      swap2\n      dup3\n      dup6\n      and\n      swap5\n      dup6\n      iszero\n      tag_60\n      jumpi\n    tag_61:\n      0x20\n      swap6\n      dup7\n      dup7\n      lt\n      dup2\n      eq\n      tag_62\n      jumpi\n      dup6\n      dup10\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_64\n      jumpi\n      pop\n      0x01\n      eq\n      tag_66\n      jumpi\n    tag_67:\n      tag_68\n      dup8\n      dup8\n      tag_69\n      dup3\n      dup13\n      sub\n      dup4\n      tag_5\n      jump\t// in\n    tag_69:\n      mload\n      swap2\n      dup3\n      swap2\n      dup3\n      tag_1\n      jump\t// in\n    tag_68:\n      sub\n      swap1\n      return\n    tag_66:\n      dup2\n      mstore\n      swap3\n      swap6\n      pop\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n    tag_70:\n      dup3\n      dup5\n      lt\n      tag_71\n      jumpi\n      pop\n      pop\n      pop\n      dup3\n      tag_68\n      swap5\n      tag_69\n      swap3\n      dup3\n      add\n      add\n      swap5\n      codesize\n      dup1\n      jump(tag_67)\n    tag_71:\n      dup1\n      sload\n      dup7\n      dup6\n      add\n      dup9\n      add\n      mstore\n      swap3\n      dup7\n      add\n      swap3\n      dup2\n      add\n      jump(tag_70)\n    tag_64:\n      not(0xff)\n      and\n      dup9\n      dup8\n      add\n      mstore\n      pop\n      pop\n      pop\n      pop\n      iszero\n      iszero\n      dup2\n      mul\n      dup4\n      add\n      add\n      swap3\n      pop\n      tag_69\n      dup3\n      tag_68\n      codesize\n      dup1\n      jump(tag_67)\n    tag_62:\n      0x24\n      dup5\n      0x22\n      dup6\n      mul(0x4e487b71, exp(0x02, 0xe0))\n      dup4\n      mstore\n      mstore\n      revert\n    tag_60:\n      swap4\n      0x7f\n      and\n      swap4\n      jump(tag_61)\n    tag_58:\n      dup3\n      dup1\n      revert\n    tag_24:\n      pop\n      pop\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x20))\n      dup1\n      0x20\n      swap3\n      sub(exp(0x02, 0xa0), 0x01)\n      tag_77\n      tag_2\n      jump\t// in\n    tag_77:\n      and\n      dup2\n      mstore\n      dup1\n      dup5\n      mstore\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_22:\n      pop\n      pop\n      jumpi(tag_36, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n        /* \"contracts/ERC20.sol\":6264:6305  allowance(owner, spender).add(addedValue) */\n      tag_44\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      0x20\n      swap3\n        /* \"contracts/ERC20.sol\":6264:6305  allowance(owner, spender).add(addedValue) */\n      tag_54\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_84\n      tag_2\n      jump\t// in\n    tag_84:\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      swap2\n      caller\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      0x01\n      dup7\n      mstore\n      dup5\n      dup2\n      keccak256\n      sub(exp(0x02, 0xa0), 0x01)\n      dup5\n      and\n      dup3\n      mstore\n      dup7\n      mstore\n      dup5\n      calldataload(0x24)\n      swap2\n      keccak256\n      sload\n        /* \"contracts/ERC20.sol\":6264:6305  allowance(owner, spender).add(addedValue) */\n      tag_8\n      jump\t// in\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_20:\n      pop\n      pop\n      jumpi(tag_36, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n      0x20\n      swap1\n      mload\n        /* \"contracts/ERC20.sol\":3304:3306  18 */\n      0x12\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      mstore\n      return\n    tag_18:\n      dup4\n      swap2\n      pop\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x60))\n      tag_93\n      tag_2\n      jump\t// in\n    tag_93:\n      tag_94\n      tag_3\n      jump\t// in\n    tag_94:\n      swap2\n      dup5\n      calldataload(0x44)\n      swap5\n      sub(exp(0x02, 0xa0), 0x01)\n      dup5\n      and\n      dup2\n      mstore\n      mstore(0x20, 0x01)\n      dup2\n      dup2\n      keccak256\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      mstore\n      0x20\n      mstore\n      keccak256\n      sload\n        /* \"contracts/ERC20.sol\":11787:11804  type(uint256).max */\n      swap1\n      not(0x00)\n        /* \"contracts/ERC20.sol\":11767:11804  currentAllowance != type(uint256).max */\n      dup3\n      sub\n        /* \"contracts/ERC20.sol\":11763:12002  if (currentAllowance != type(uint256).max) {... */\n      tag_95\n      jumpi\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_96:\n      0x20\n        /* \"contracts/ERC20.sol\":5649:5655  amount */\n      dup7\n      tag_44\n      dup8\n      dup8\n      dup8\n      tag_6\n      jump\t// in\n        /* \"contracts/ERC20.sol\":11763:12002  if (currentAllowance != type(uint256).max) {... */\n    tag_95:\n        /* \"contracts/ERC20.sol\":11829:11855  currentAllowance >= amount */\n      dup5\n      dup3\n      lt\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_98\n      jumpi\n      pop\n      swap2\n      dup4\n      swap2\n        /* \"contracts/ERC20.sol\":11950:11978  currentAllowance.sub(amount) */\n      tag_100\n        /* \"libraries/SafeMath.sol\":1036:1079  sub(a, b, \"SafeMath: subtraction overflow\") */\n      tag_101\n        /* \"contracts/ERC20.sol\":5649:5655  amount */\n      tag_44\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap6\n      dup9\n      swap8\n      0x20\n      swap10\n      mload\n      swap2\n      tag_102\n      dup4\n      tag_4\n      jump\t// in\n    tag_102:\n      0x1e\n      dup4\n      mstore\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup12\n      dup5\n      add\n      mstore\n        /* \"libraries/SafeMath.sol\":1036:1079  sub(a, b, \"SafeMath: subtraction overflow\") */\n      tag_9\n      jump\t// in\n    tag_101:\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      caller\n        /* \"contracts/ERC20.sol\":11950:11978  currentAllowance.sub(amount) */\n      dup4\n      tag_7\n      jump\t// in\n    tag_100:\n        /* \"contracts/ERC20.sol\":11763:12002  if (currentAllowance != type(uint256).max) {... */\n      swap2\n      swap4\n      swap5\n      dup2\n      swap4\n      pop\n      jump(tag_96)\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_98:\n      0x64\n      swap1\n      0x20\n      dup8\n      mload\n      swap2\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_16:\n      pop\n      pop\n      jumpi(tag_36, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n      0x20\n      swap1\n        /* \"contracts/ERC20.sol\":3467:3479  _totalSupply */\n      0x02\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_14:\n      pop\n      pop\n      jumpi(tag_36, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_36\n      jumpi\n      0x20\n      swap1\n        /* \"contracts/ERC20.sol\":4774:4780  amount */\n      tag_44\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_112\n      tag_2\n      jump\t// in\n    tag_112:\n      calldataload(0x24)\n        /* \"utils/Context.sol\":736:746  msg.sender */\n      swap1\n      caller\n        /* \"contracts/ERC20.sol\":4774:4780  amount */\n      tag_7\n      jump\t// in\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_12:\n      swap3\n      swap2\n      pop\n      jumpi(tag_115, callvalue)\n      dup4\n      add(calldatasize, not(0x03))\n      slt\n      tag_115\n      jumpi\n      dup4\n      sload(0x03)\n      0x02\n      dup2\n      div\n      swap2\n      0x01\n      swap2\n      dup3\n      dup2\n      and\n      dup1\n      iszero\n      tag_117\n      jumpi\n    tag_118:\n      0x20\n      swap6\n      dup7\n      dup7\n      lt\n      dup3\n      eq\n      tag_119\n      jumpi\n      pop\n      dup5\n      dup9\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_121\n      jumpi\n      pop\n      0x01\n      eq\n      tag_123\n      jumpi\n    tag_124:\n      tag_68\n      dup7\n      dup7\n      tag_69\n      dup3\n      dup12\n      sub\n      dup4\n      tag_5\n      jump\t// in\n    tag_123:\n      swap3\n      swap6\n      pop\n      0x03\n      dup4\n      mstore\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n    tag_127:\n      dup3\n      dup5\n      lt\n      tag_128\n      jumpi\n      pop\n      pop\n      pop\n      dup3\n      tag_68\n      swap5\n      tag_69\n      swap3\n      dup3\n      add\n      add\n      swap5\n      codesize\n      jump(tag_124)\n    tag_128:\n      dup1\n      sload\n      dup7\n      dup6\n      add\n      dup9\n      add\n      mstore\n      swap3\n      dup7\n      add\n      swap3\n      dup2\n      add\n      jump(tag_127)\n    tag_121:\n      not(0xff)\n      and\n      dup8\n      dup7\n      add\n      mstore\n      pop\n      pop\n      pop\n      iszero\n      iszero\n      dup2\n      mul\n      dup4\n      add\n      add\n      swap3\n      pop\n      tag_69\n      dup3\n      tag_68\n      codesize\n      jump(tag_124)\n    tag_119:\n      dup4\n      0x22\n      0x24\n      swap3\n      mul(0x4e487b71, exp(0x02, 0xe0))\n      dup4\n      mstore\n      mstore\n      revert\n    tag_117:\n      swap4\n      0x7f\n      and\n      swap4\n      jump(tag_118)\n    tag_115:\n      dup4\n      dup1\n      revert\n    tag_1:\n      0x20\n      dup1\n      dup3\n      mstore\n      dup3\n      mload\n      dup2\n      dup4\n      add\n      dup2\n      swap1\n      mstore\n      swap1\n      swap4\n      swap3\n      0x00\n    tag_130:\n      dup3\n      dup2\n      lt\n      tag_131\n      jumpi\n      pop\n      pop\n      0x40\n      swap3\n      swap4\n      pop\n      0x00\n      dup4\n      dup3\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_131:\n      dup2\n      dup2\n      add\n      dup7\n      add\n      mload\n      dup5\n      dup3\n      add\n      0x40\n      add\n      mstore\n      dup6\n      add\n      jump(tag_130)\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(exp(0x02, 0xa0), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_133\n      jumpi\n      jump\t// out\n    tag_133:\n      0x00\n      dup1\n      revert\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(exp(0x02, 0xa0), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_133\n      jumpi\n      jump\t// out\n    tag_4:\n      0x40\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_137\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_137:\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_5:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_137\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n        /* \"contracts/ERC20.sol\":7736:8573  function _transfer(... */\n    tag_6:\n      swap3\n      swap2\n      swap3\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup1\n      swap2\n      and\n        /* \"contracts/ERC20.sol\":7867:7885  from != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_141\n      jumpi\n      and\n        /* \"contracts/ERC20.sol\":7946:7962  to != address(0) */\n      swap1\n      dup2\n      iszero\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_143\n      jumpi\n        /* \"contracts/ERC20.sol\":7883:7884  0 */\n      0x00\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap4\n      dup2\n      dup6\n      mstore\n      0x20\n      swap1\n      dup6\n      dup3\n      mstore\n      0x40\n      dup1\n      dup8\n      keccak256\n      sload\n        /* \"contracts/ERC20.sol\":8122:8143  fromBalance >= amount */\n      swap7\n      dup3\n      dup9\n      lt\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_145\n      jumpi\n        /* \"libraries/SafeMath.sol\":1036:1079  sub(a, b, \"SafeMath: subtraction overflow\") */\n      tag_147\n        /* \"contracts/ERC20.sol\":8489:8515  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap6\n      swap7\n      swap8\n      swap9\n      dup5\n      dup5\n      mload\n      swap2\n      tag_55\n      dup4\n      tag_4\n      jump\t// in\n        /* \"libraries/SafeMath.sol\":1036:1079  sub(a, b, \"SafeMath: subtraction overflow\") */\n    tag_147:\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup7\n      dup3\n      mstore\n      dup2\n      dup6\n      mstore\n      dup3\n      dup3\n      keccak256\n      sstore\n      dup7\n      dup2\n      mstore\n      dup2\n        /* \"contracts/ERC20.sol\":8439:8464  _balances[to].add(amount) */\n      tag_149\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup5\n      dup3\n      dup5\n      keccak256\n      sload\n        /* \"contracts/ERC20.sol\":8439:8464  _balances[to].add(amount) */\n      tag_8\n      jump\t// in\n    tag_149:\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap2\n      dup9\n      dup2\n      mstore\n      dup1\n      dup7\n      mstore\n      keccak256\n      sstore\n      mload\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20.sol\":8489:8515  Transfer(from, to, amount) */\n      log3\n        /* \"contracts/ERC20.sol\":7736:8573  function _transfer(... */\n      jump\t// out\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_145:\n      0x84\n      dup5\n      dup4\n      mload\n      swap1\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup3\n      mstore\n      0x04\n      dup3\n      add\n      mstore\n      0x26\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n      0x44\n      dup3\n      add\n      mstore\n      0x616c616e63650000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_143:\n      0x84\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n      0x44\n      dup3\n      add\n      mstore\n      0x6573730000000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_141:\n      0x84\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n      0x44\n      dup3\n      add\n      mstore\n      0x6472657373000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      revert\n        /* \"contracts/ERC20.sol\":10894:11274  function _approve(... */\n    tag_7:\n      sub(exp(0x02, 0xa0), 0x01)\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup1\n      swap2\n      and\n        /* \"contracts/ERC20.sol\":11030:11049  owner != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_150\n      jumpi\n      and\n        /* \"contracts/ERC20.sol\":11109:11130  spender != address(0) */\n      swap2\n      dup3\n      iszero\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_152\n      jumpi\n      0x20\n        /* \"contracts/ERC20.sol\":11234:11266  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      swap2\n      dup4\n        /* \"contracts/ERC20.sol\":11047:11048  0 */\n      0x00\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore\n        /* \"contracts/ERC20.sol\":11182:11193  _allowances */\n      0x01\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup3\n      mstore\n      0x40\n        /* \"contracts/ERC20.sol\":11047:11048  0 */\n      0x00\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      keccak256\n      dup6\n        /* \"contracts/ERC20.sol\":11047:11048  0 */\n      0x00\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore\n      dup3\n      mstore\n      dup1\n      0x40\n        /* \"contracts/ERC20.sol\":11047:11048  0 */\n      0x00\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      keccak256\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ERC20.sol\":11234:11266  Approval(owner, spender, amount) */\n      log3\n        /* \"contracts/ERC20.sol\":10894:11274  function _approve(... */\n      jump\t// out\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_152:\n      0x84\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x22\n      0x24\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n      0x44\n      dup3\n      add\n      mstore\n      0x7373000000000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_150:\n      0x84\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x24\n      dup1\n      dup3\n      add\n      mstore\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n      0x44\n      dup3\n      add\n      mstore\n      0x7265737300000000000000000000000000000000000000000000000000000000\n      0x64\n      dup3\n      add\n      mstore\n      revert\n        /* \"libraries/SafeMath.sol\":487:668  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_8:\n      swap1\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      dup2\n      add\n      swap1\n      dup2\n      dup2\n      gt\n      tag_154\n      jumpi\n        /* \"libraries/SafeMath.sol\":601:607  c >= a */\n      dup2\n      lt\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_156\n      jumpi\n        /* \"libraries/SafeMath.sol\":487:668  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_156:\n      0x64\n      mload(0x40)\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_154:\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n        /* \"libraries/SafeMath.sol\":1390:1582  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_9:\n      swap2\n        /* \"libraries/SafeMath.sol\":1504:1510  b <= a */\n      dup3\n      dup3\n      gt\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      tag_158\n      jumpi\n      pop\n      dup2\n      sub\n      swap1\n      dup2\n      gt\n      tag_154\n      jumpi\n        /* \"libraries/SafeMath.sol\":1390:1582  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20.sol\":1482:13465  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n    tag_158:\n      tag_162\n      swap1\n      mload(0x40)\n      swap2\n      dup3\n      swap2\n      mul(0x461bcd, exp(0x02, 0xe5))\n      dup4\n      mstore\n      0x04\n      dup4\n      add\n      tag_1\n      jump\t// in\n    tag_162:\n      sub\n      swap1\n      revert\n\n    auxdata: 0xa2646970667358221220bc98d69c2096022d9930109c86c71940cf56dd99d56426487d959b063ed0e7de64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"extract_byte_array_length": {
									"entryPoint": 235,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052346100e6576100146003546100eb565b601f81116100b8575b507f537769736846697368000000000000000000000000000000000000000000001260035560045461004e906100eb565b601f811161008a575b7f5346480000000000000000000000000000000000000000000000000000000006600455604051610aec90816101408239f35b600090600482526020601f8184209201048101905b8181106100ad575050610057565b82815560010161009f565b600090600382526020601f8184209201048101905b8181106100db57505061001d565b8281556001016100cd565b600080fd5b9060016002830492168015610135575b602083101461010657565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916100fb56fe608060408181526004918236101561001657600080fd5b6000927c010000000000000000000000000000000000000000000000000000000084350491826306fdde031461052a57508163095ea7b31461050057816318160ddd146104e157816323b872dd146103d7578163313ce567146103bb578163395093511461037357816370a082311461033d57816395d89b4114610233578163a457c2d71461013557508063a9059cbb146101055763dd62ed3e146100ba57600080fd5b34610101578060031936011261010157806020926100d661066b565b6100de610686565b600160a060020a0391821683526001865283832091168252845220549051908152f35b5080fd5b503461010157806003193601126101015760209061012e61012461066b565b60243590336106f3565b5160018152f35b8391503461010157826003193601126101015761015061066b565b9183602435913381526001602052818120600160a060020a03861682526020522054918183106101c75760208561012e866101c087878551916101928361069c565b601e83527f536166654d6174683a207375627472616374696f6e206f766572666c6f77000088840152610a7e565b90336108d0565b608490602086519160e560020a62461bcd028352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b9190503461033957826003193601126103395780519183815491600283049160019182851694851561032f575b6020958686108114610319578589529081156102f6575060011461029e575b61029a8787610290828c03836106d1565b5191829182610622565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106102e3575050508261029a946102909282010194388061027f565b80548685018801529286019281016102c5565b60ff191688870152505050501515810283010192506102908261029a388061027f565b60248460228560e060020a634e487b7102835252fd5b93607f1693610260565b8280fd5b5050346101015760203660031901126101015780602092600160a060020a0361036461066b565b16815280845220549051908152f35b50503461010157806003193601126101015761012e6020926101c061039661066b565b9133815260018652848120600160a060020a0384168252865284602435912054610a0a565b5050346101015781600319360112610101576020905160128152f35b83915034610101576060366003190112610101576103f361066b565b6103fb610686565b918460443594600160a060020a038416815260016020528181203382526020522054906000198203610436575b60208661012e8787876106f3565b84821061049b575091839161049061048961012e958897602099519161045b8361069c565b601e83527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008b840152610a7e565b33836108d0565b919394819350610428565b606490602087519160e560020a62461bcd028352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346101015781600319360112610101576020906002549051908152f35b50503461010157806003193601126101015760209061012e61052061066b565b60243590336108d0565b9291503461061e578360031936011261061e578360035460028104916001918281168015610614575b60209586861082146105fe57508488529081156105dd5750600114610584575b61029a8686610290828b03836106d1565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106105ca575050508261029a94610290928201019438610573565b80548685018801529286019281016105ad565b60ff1916878601525050501515810283010192506102908261029a38610573565b83602260249260e060020a634e487b7102835252fd5b93607f1693610553565b8380fd5b6020808252825181830181905290939260005b82811061065757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610635565b60043590600160a060020a038216820361068157565b600080fd5b60243590600160a060020a038216820361068157565b6040810190811067ffffffffffffffff8211176106b857604052565b60e060020a634e487b7102600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106b857604052565b929192600160a060020a0380911691821561086357169081156107f6576000938185526020908582526040808720549682881061078a5761075f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95969798848451916101928361069c565b868252818552828220558681528161077a8482842054610a0a565b91888152808652205551908152a3565b60848483519060e560020a62461bcd0282526004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b608460405160e560020a62461bcd02815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b608460405160e560020a62461bcd02815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b600160a060020a0380911691821561099e57169182156109315760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b608460405160e560020a62461bcd02815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405160e560020a62461bcd028152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b90810190818111610a65578110610a1e5790565b606460405160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152fd5b60e060020a634e487b7102600052601160045260246000fd5b91828211610a9357508103908111610a655790565b610ab29060405191829160e560020a62461bcd02835260048301610622565b0390fdfea2646970667358221220bc98d69c2096022d9930109c86c71940cf56dd99d56426487d959b063ed0e7de64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0xE6 JUMPI PUSH2 0x14 PUSH1 0x3 SLOAD PUSH2 0xEB JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xB8 JUMPI JUMPDEST POP PUSH32 0x5377697368466973680000000000000000000000000000000000000000000012 PUSH1 0x3 SSTORE PUSH1 0x4 SLOAD PUSH2 0x4E SWAP1 PUSH2 0xEB JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x8A JUMPI JUMPDEST PUSH32 0x5346480000000000000000000000000000000000000000000000000000000006 PUSH1 0x4 SSTORE PUSH1 0x40 MLOAD PUSH2 0xAEC SWAP1 DUP2 PUSH2 0x140 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x4 DUP3 MSTORE PUSH1 0x20 PUSH1 0x1F DUP2 DUP5 KECCAK256 SWAP3 ADD DIV DUP2 ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xAD JUMPI POP POP PUSH2 0x57 JUMP JUMPDEST DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9F JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 DUP3 MSTORE PUSH1 0x20 PUSH1 0x1F DUP2 DUP5 KECCAK256 SWAP3 ADD DIV DUP2 ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xDB JUMPI POP POP PUSH2 0x1D JUMP JUMPDEST DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xCD JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x135 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x106 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xFB JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 PUSH29 0x100000000000000000000000000000000000000000000000000000000 DUP5 CALLDATALOAD DIV SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x52A JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x500 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x4E1 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x3D7 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x3BB JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x373 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x33D JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x233 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x135 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x105 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD6 PUSH2 0x66B JUMP JUMPDEST PUSH2 0xDE PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x12E PUSH2 0x124 PUSH2 0x66B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x6F3 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x101 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH2 0x150 PUSH2 0x66B JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP2 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP2 DUP2 DUP4 LT PUSH2 0x1C7 JUMPI PUSH1 0x20 DUP6 PUSH2 0x12E DUP7 PUSH2 0x1C0 DUP8 DUP8 DUP6 MLOAD SWAP2 PUSH2 0x192 DUP4 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x1E DUP4 MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP9 DUP5 ADD MSTORE PUSH2 0xA7E JUMP JUMPDEST SWAP1 CALLER PUSH2 0x8D0 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x339 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x339 JUMPI DUP1 MLOAD SWAP2 DUP4 DUP2 SLOAD SWAP2 PUSH1 0x2 DUP4 DIV SWAP2 PUSH1 0x1 SWAP2 DUP3 DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x32F JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP2 EQ PUSH2 0x319 JUMPI DUP6 DUP10 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2F6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x29E JUMPI JUMPDEST PUSH2 0x29A DUP8 DUP8 PUSH2 0x290 DUP3 DUP13 SUB DUP4 PUSH2 0x6D1 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x622 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP3 SWAP6 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x2E3 JUMPI POP POP POP DUP3 PUSH2 0x29A SWAP5 PUSH2 0x290 SWAP3 DUP3 ADD ADD SWAP5 CODESIZE DUP1 PUSH2 0x27F JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP9 DUP8 ADD MSTORE POP POP POP POP ISZERO ISZERO DUP2 MUL DUP4 ADD ADD SWAP3 POP PUSH2 0x290 DUP3 PUSH2 0x29A CODESIZE DUP1 PUSH2 0x27F JUMP JUMPDEST PUSH1 0x24 DUP5 PUSH1 0x22 DUP6 PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x260 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x101 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH2 0x364 PUSH2 0x66B JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH2 0x12E PUSH1 0x20 SWAP3 PUSH2 0x1C0 PUSH2 0x396 PUSH2 0x66B JUMP JUMPDEST SWAP2 CALLER DUP2 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND DUP3 MSTORE DUP7 MSTORE DUP5 PUSH1 0x24 CALLDATALOAD SWAP2 KECCAK256 SLOAD PUSH2 0xA0A JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x101 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x101 JUMPI PUSH2 0x3F3 PUSH2 0x66B JUMP JUMPDEST PUSH2 0x3FB PUSH2 0x686 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x436 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x12E DUP8 DUP8 DUP8 PUSH2 0x6F3 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x49B JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x490 PUSH2 0x489 PUSH2 0x12E SWAP6 DUP9 SWAP8 PUSH1 0x20 SWAP10 MLOAD SWAP2 PUSH2 0x45B DUP4 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x1E DUP4 MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP12 DUP5 ADD MSTORE PUSH2 0xA7E JUMP JUMPDEST CALLER DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x428 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x12E PUSH2 0x520 PUSH2 0x66B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x8D0 JUMP JUMPDEST SWAP3 SWAP2 POP CALLVALUE PUSH2 0x61E JUMPI DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x61E JUMPI DUP4 PUSH1 0x3 SLOAD PUSH1 0x2 DUP2 DIV SWAP2 PUSH1 0x1 SWAP2 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x614 JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP3 EQ PUSH2 0x5FE JUMPI POP DUP5 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x5DD JUMPI POP PUSH1 0x1 EQ PUSH2 0x584 JUMPI JUMPDEST PUSH2 0x29A DUP7 DUP7 PUSH2 0x290 DUP3 DUP12 SUB DUP4 PUSH2 0x6D1 JUMP JUMPDEST SWAP3 SWAP6 POP PUSH1 0x3 DUP4 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x5CA JUMPI POP POP POP DUP3 PUSH2 0x29A SWAP5 PUSH2 0x290 SWAP3 DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x573 JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x5AD JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP7 ADD MSTORE POP POP POP ISZERO ISZERO DUP2 MUL DUP4 ADD ADD SWAP3 POP PUSH2 0x290 DUP3 PUSH2 0x29A CODESIZE PUSH2 0x573 JUMP JUMPDEST DUP4 PUSH1 0x22 PUSH1 0x24 SWAP3 PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x553 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x657 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x635 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND DUP3 SUB PUSH2 0x681 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND DUP3 SUB PUSH2 0x681 JUMPI JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x6B8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x6B8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x863 JUMPI AND SWAP1 DUP2 ISZERO PUSH2 0x7F6 JUMPI PUSH1 0x0 SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 SWAP1 DUP6 DUP3 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SLOAD SWAP7 DUP3 DUP9 LT PUSH2 0x78A JUMPI PUSH2 0x75F PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 SWAP7 SWAP8 SWAP9 DUP5 DUP5 MLOAD SWAP2 PUSH2 0x192 DUP4 PUSH2 0x69C JUMP JUMPDEST DUP7 DUP3 MSTORE DUP2 DUP6 MSTORE DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE DUP2 PUSH2 0x77A DUP5 DUP3 DUP5 KECCAK256 SLOAD PUSH2 0xA0A JUMP JUMPDEST SWAP2 DUP9 DUP2 MSTORE DUP1 DUP7 MSTORE KECCAK256 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 DUP5 DUP4 MLOAD SWAP1 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x99E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x931 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xA65 JUMPI DUP2 LT PUSH2 0xA1E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 DUP3 DUP3 GT PUSH2 0xA93 JUMPI POP DUP2 SUB SWAP1 DUP2 GT PUSH2 0xA65 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xAB2 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x622 JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC SWAP9 0xD6 SWAP13 KECCAK256 SWAP7 MUL 0x2D SWAP10 ADDRESS LT SWAP13 DUP7 0xC7 NOT BLOCKHASH 0xCF JUMP 0xDD SWAP10 0xD5 PUSH5 0x26487D959B MOD RETURNDATACOPY 0xD0 0xE7 0xDE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "1482:11983:0:-:0;;;;;;;2136:19;1482:11983;;:::i;:::-;;;;;;-1:-1:-1;;1482:11983:0;2136:19;1482:11983;2166:15;1482:11983;;;;:::i;:::-;;;;;;-1:-1:-1;1482:11983:0;2166:15;1482:11983;;;;;;;;;;;-1:-1:-1;1482:11983:0;2166:15;1482:11983;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1482:11983:0;2136:19;1482:11983;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 1670,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_5424": {
									"entryPoint": 1643,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 1570,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 1745,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_5427": {
									"entryPoint": 1692,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_add": {
									"entryPoint": 2570,
									"id": 741,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_approve": {
									"entryPoint": 2256,
									"id": 542,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_sub": {
									"entryPoint": 2686,
									"id": 786,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_transfer": {
									"entryPoint": 1779,
									"id": 354,
									"parameterSlots": 3,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060408181526004918236101561001657600080fd5b6000927c010000000000000000000000000000000000000000000000000000000084350491826306fdde031461052a57508163095ea7b31461050057816318160ddd146104e157816323b872dd146103d7578163313ce567146103bb578163395093511461037357816370a082311461033d57816395d89b4114610233578163a457c2d71461013557508063a9059cbb146101055763dd62ed3e146100ba57600080fd5b34610101578060031936011261010157806020926100d661066b565b6100de610686565b600160a060020a0391821683526001865283832091168252845220549051908152f35b5080fd5b503461010157806003193601126101015760209061012e61012461066b565b60243590336106f3565b5160018152f35b8391503461010157826003193601126101015761015061066b565b9183602435913381526001602052818120600160a060020a03861682526020522054918183106101c75760208561012e866101c087878551916101928361069c565b601e83527f536166654d6174683a207375627472616374696f6e206f766572666c6f77000088840152610a7e565b90336108d0565b608490602086519160e560020a62461bcd028352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b9190503461033957826003193601126103395780519183815491600283049160019182851694851561032f575b6020958686108114610319578589529081156102f6575060011461029e575b61029a8787610290828c03836106d1565b5191829182610622565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106102e3575050508261029a946102909282010194388061027f565b80548685018801529286019281016102c5565b60ff191688870152505050501515810283010192506102908261029a388061027f565b60248460228560e060020a634e487b7102835252fd5b93607f1693610260565b8280fd5b5050346101015760203660031901126101015780602092600160a060020a0361036461066b565b16815280845220549051908152f35b50503461010157806003193601126101015761012e6020926101c061039661066b565b9133815260018652848120600160a060020a0384168252865284602435912054610a0a565b5050346101015781600319360112610101576020905160128152f35b83915034610101576060366003190112610101576103f361066b565b6103fb610686565b918460443594600160a060020a038416815260016020528181203382526020522054906000198203610436575b60208661012e8787876106f3565b84821061049b575091839161049061048961012e958897602099519161045b8361069c565b601e83527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008b840152610a7e565b33836108d0565b919394819350610428565b606490602087519160e560020a62461bcd028352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346101015781600319360112610101576020906002549051908152f35b50503461010157806003193601126101015760209061012e61052061066b565b60243590336108d0565b9291503461061e578360031936011261061e578360035460028104916001918281168015610614575b60209586861082146105fe57508488529081156105dd5750600114610584575b61029a8686610290828b03836106d1565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106105ca575050508261029a94610290928201019438610573565b80548685018801529286019281016105ad565b60ff1916878601525050501515810283010192506102908261029a38610573565b83602260249260e060020a634e487b7102835252fd5b93607f1693610553565b8380fd5b6020808252825181830181905290939260005b82811061065757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610635565b60043590600160a060020a038216820361068157565b600080fd5b60243590600160a060020a038216820361068157565b6040810190811067ffffffffffffffff8211176106b857604052565b60e060020a634e487b7102600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106b857604052565b929192600160a060020a0380911691821561086357169081156107f6576000938185526020908582526040808720549682881061078a5761075f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95969798848451916101928361069c565b868252818552828220558681528161077a8482842054610a0a565b91888152808652205551908152a3565b60848483519060e560020a62461bcd0282526004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b608460405160e560020a62461bcd02815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b608460405160e560020a62461bcd02815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b600160a060020a0380911691821561099e57169182156109315760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b608460405160e560020a62461bcd02815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405160e560020a62461bcd028152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b90810190818111610a65578110610a1e5790565b606460405160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152fd5b60e060020a634e487b7102600052601160045260246000fd5b91828211610a9357508103908111610a655790565b610ab29060405191829160e560020a62461bcd02835260048301610622565b0390fdfea2646970667358221220bc98d69c2096022d9930109c86c71940cf56dd99d56426487d959b063ed0e7de64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 PUSH29 0x100000000000000000000000000000000000000000000000000000000 DUP5 CALLDATALOAD DIV SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x52A JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x500 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x4E1 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x3D7 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x3BB JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x373 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x33D JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x233 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x135 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x105 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD6 PUSH2 0x66B JUMP JUMPDEST PUSH2 0xDE PUSH2 0x686 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x12E PUSH2 0x124 PUSH2 0x66B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x6F3 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x101 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH2 0x150 PUSH2 0x66B JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP2 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP2 DUP2 DUP4 LT PUSH2 0x1C7 JUMPI PUSH1 0x20 DUP6 PUSH2 0x12E DUP7 PUSH2 0x1C0 DUP8 DUP8 DUP6 MLOAD SWAP2 PUSH2 0x192 DUP4 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x1E DUP4 MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP9 DUP5 ADD MSTORE PUSH2 0xA7E JUMP JUMPDEST SWAP1 CALLER PUSH2 0x8D0 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x339 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x339 JUMPI DUP1 MLOAD SWAP2 DUP4 DUP2 SLOAD SWAP2 PUSH1 0x2 DUP4 DIV SWAP2 PUSH1 0x1 SWAP2 DUP3 DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x32F JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP2 EQ PUSH2 0x319 JUMPI DUP6 DUP10 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2F6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x29E JUMPI JUMPDEST PUSH2 0x29A DUP8 DUP8 PUSH2 0x290 DUP3 DUP13 SUB DUP4 PUSH2 0x6D1 JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x622 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP2 MSTORE SWAP3 SWAP6 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x2E3 JUMPI POP POP POP DUP3 PUSH2 0x29A SWAP5 PUSH2 0x290 SWAP3 DUP3 ADD ADD SWAP5 CODESIZE DUP1 PUSH2 0x27F JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP9 DUP8 ADD MSTORE POP POP POP POP ISZERO ISZERO DUP2 MUL DUP4 ADD ADD SWAP3 POP PUSH2 0x290 DUP3 PUSH2 0x29A CODESIZE DUP1 PUSH2 0x27F JUMP JUMPDEST PUSH1 0x24 DUP5 PUSH1 0x22 DUP6 PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x260 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x101 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH2 0x364 PUSH2 0x66B JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH2 0x12E PUSH1 0x20 SWAP3 PUSH2 0x1C0 PUSH2 0x396 PUSH2 0x66B JUMP JUMPDEST SWAP2 CALLER DUP2 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP2 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND DUP3 MSTORE DUP7 MSTORE DUP5 PUSH1 0x24 CALLDATALOAD SWAP2 KECCAK256 SLOAD PUSH2 0xA0A JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0x101 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x101 JUMPI PUSH2 0x3F3 PUSH2 0x66B JUMP JUMPDEST PUSH2 0x3FB PUSH2 0x686 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x436 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x12E DUP8 DUP8 DUP8 PUSH2 0x6F3 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x49B JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x490 PUSH2 0x489 PUSH2 0x12E SWAP6 DUP9 SWAP8 PUSH1 0x20 SWAP10 MLOAD SWAP2 PUSH2 0x45B DUP4 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x1E DUP4 MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP12 DUP5 ADD MSTORE PUSH2 0xA7E JUMP JUMPDEST CALLER DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x428 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x101 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x101 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x12E PUSH2 0x520 PUSH2 0x66B JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x8D0 JUMP JUMPDEST SWAP3 SWAP2 POP CALLVALUE PUSH2 0x61E JUMPI DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x61E JUMPI DUP4 PUSH1 0x3 SLOAD PUSH1 0x2 DUP2 DIV SWAP2 PUSH1 0x1 SWAP2 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x614 JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP7 LT DUP3 EQ PUSH2 0x5FE JUMPI POP DUP5 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x5DD JUMPI POP PUSH1 0x1 EQ PUSH2 0x584 JUMPI JUMPDEST PUSH2 0x29A DUP7 DUP7 PUSH2 0x290 DUP3 DUP12 SUB DUP4 PUSH2 0x6D1 JUMP JUMPDEST SWAP3 SWAP6 POP PUSH1 0x3 DUP4 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0x5CA JUMPI POP POP POP DUP3 PUSH2 0x29A SWAP5 PUSH2 0x290 SWAP3 DUP3 ADD ADD SWAP5 CODESIZE PUSH2 0x573 JUMP JUMPDEST DUP1 SLOAD DUP7 DUP6 ADD DUP9 ADD MSTORE SWAP3 DUP7 ADD SWAP3 DUP2 ADD PUSH2 0x5AD JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP7 ADD MSTORE POP POP POP ISZERO ISZERO DUP2 MUL DUP4 ADD ADD SWAP3 POP PUSH2 0x290 DUP3 PUSH2 0x29A CODESIZE PUSH2 0x573 JUMP JUMPDEST DUP4 PUSH1 0x22 PUSH1 0x24 SWAP3 PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL DUP4 MSTORE MSTORE REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x553 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x657 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x635 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND DUP3 SUB PUSH2 0x681 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND DUP3 SUB PUSH2 0x681 JUMPI JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x6B8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x6B8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x863 JUMPI AND SWAP1 DUP2 ISZERO PUSH2 0x7F6 JUMPI PUSH1 0x0 SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 SWAP1 DUP6 DUP3 MSTORE PUSH1 0x40 DUP1 DUP8 KECCAK256 SLOAD SWAP7 DUP3 DUP9 LT PUSH2 0x78A JUMPI PUSH2 0x75F PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 SWAP7 SWAP8 SWAP9 DUP5 DUP5 MLOAD SWAP2 PUSH2 0x192 DUP4 PUSH2 0x69C JUMP JUMPDEST DUP7 DUP3 MSTORE DUP2 DUP6 MSTORE DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE DUP2 PUSH2 0x77A DUP5 DUP3 DUP5 KECCAK256 SLOAD PUSH2 0xA0A JUMP JUMPDEST SWAP2 DUP9 DUP2 MSTORE DUP1 DUP7 MSTORE KECCAK256 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 DUP5 DUP4 MLOAD SWAP1 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x99E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x931 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xA65 JUMPI DUP2 LT PUSH2 0xA1E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 DUP3 DUP3 GT PUSH2 0xA93 JUMPI POP DUP2 SUB SWAP1 DUP2 GT PUSH2 0xA65 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xAB2 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x622 JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC SWAP9 0xD6 SWAP13 KECCAK256 SWAP7 MUL 0x2D SWAP10 ADDRESS LT SWAP13 DUP7 0xC7 NOT BLOCKHASH 0xCF JUMP 0xDD SWAP10 0xD5 PUSH5 0x26487D959B MOD RETURNDATACOPY 0xD0 0xE7 0xDE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "1482:11983:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1482:11983:0;;;;;4255:11;1482:11983;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4039:6;1482:11983;;:::i;:::-;;;736:10:4;;4039:6:0;:::i;:::-;1482:11983;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;736:10:4;;1482:11983:0;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;7059:35;;;;1482:11983;;;;7189:37;1482:11983;1036:43:3;1482:11983:0;;;;;;;;:::i;:::-;;;;;;;;;1036:43:3;:::i;:::-;736:10:4;;7189:37:0;:::i;1482:11983::-;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1482:11983:0;;;;;-1:-1:-1;;;;1482:11983:0;;;;;;;;-1:-1:-1;1482:11983:0;;;;;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1482:11983:0;;;;;;;-1:-1:-1;;;;;1482:11983:0;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6264:41;1482:11983;;6264:41;1482:11983;;:::i;:::-;736:10:4;;1482:11983:0;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;6264:41;:::i;1482:11983::-;;;;;;;;;;;;;;;;;3304:2;1482:11983;;;;;;;;;;;;-1:-1:-1;;1482:11983:0;;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;736:10:4;1482:11983:0;;;;;;11787:17;;;11767:37;;11763:239;;1482:11983;;5649:6;;;;;;:::i;11763:239::-;11829:26;;;1482:11983;;;;;;11950:28;1036:43:3;5649:6:0;1482:11983;;;;;;;;;;:::i;:::-;;;;;;;;;1036:43:3;:::i;:::-;736:10:4;11950:28:0;;:::i;:::-;11763:239;;;;;;;;1482:11983;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3467:12;1482:11983;;;;;;;;;;;;;;;;;;;;;;;4774:6;1482:11983;;:::i;:::-;;;736:10:4;;4774:6:0;:::i;1482:11983::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1482:11983:0;;;;;-1:-1:-1;;;1482:11983:0;;;;;;;;-1:-1:-1;1482:11983:0;;;;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7736:837::-;;;;-1:-1:-1;;;;;1482:11983:0;;;7867:18;;;1482:11983;;;7946:16;;;1482:11983;;7883:1;1482:11983;;;;;;;;;;;;;;8122:21;;;;1482:11983;;1036:43:3;8489:26:0;1482:11983;;;;;;;;;;;:::i;1036:43:3:-;1482:11983:0;;;;;;;;;;;;;;8439:25;1482:11983;;;;;8439:25;:::i;:::-;1482:11983;;;;;;;;;;;;;8489:26;7736:837::o;1482:11983::-;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;10894:380;-1:-1:-1;;;;;1482:11983:0;;;11030:19;;;1482:11983;;;11109:21;;;1482:11983;;;11234:32;1482:11983;;11047:1;1482:11983;11182:11;1482:11983;;;11047:1;1482:11983;;11047:1;1482:11983;;;;;11047:1;1482:11983;;;;;;;11234:32;10894:380::o;1482:11983::-;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;;;;;487:181:3;;1482:11983:0;;;;;;;;601:6:3;;1482:11983:0;;487:181:3;:::o;1482:11983:0:-;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1482:11983:0;;;;;-1:-1:-1;1482:11983:0;1390:192:3;;1504:6;;;1482:11983:0;;;;;;;;;;1390:192:3;:::o;1482:11983:0:-;;;;;;;;-1:-1:-1;;;;;1482:11983:0;;;;;;:::i;:::-;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "559200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "1061",
								"approve(address,uint256)": "22403",
								"balanceOf(address)": "776",
								"decimals()": "264",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "22977",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "426",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 2136,
									"end": 2155,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "6"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "5377697368466973680000000000000000000000000000000000000000000012"
								},
								{
									"begin": 2136,
									"end": 2155,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2166,
									"end": 2181,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "5346480000000000000000000000000000000000000000000000000000000006"
								},
								{
									"begin": 2166,
									"end": 2181,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "RETURN",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2166,
									"end": 2181,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2136,
									"end": 2155,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "22"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH",
									"source": 0,
									"value": "7F"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1482,
									"end": 13465,
									"name": "JUMP",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bc98d69c2096022d9930109c86c71940cf56dd99d56426487d959b063ed0e7de64736f6c63430008110033",
									".code": [
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4255,
											"end": 4266,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4039,
											"end": 4045,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4039,
											"end": 4045,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 4039,
											"end": 4045,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4039,
											"end": 4045,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 4039,
											"end": 4045,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7059,
											"end": 7094,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7059,
											"end": 7094,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7059,
											"end": 7094,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7059,
											"end": 7094,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7189,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1E"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1036,
											"end": 1079,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 736,
											"end": 746,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 7189,
											"end": 7226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 7189,
											"end": 7226,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "207A65726F000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CODESIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CODESIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "7F"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6264,
											"end": 6305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6264,
											"end": 6305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6264,
											"end": 6305,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 6264,
											"end": 6305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3304,
											"end": 3306,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 11787,
											"end": 11804,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11787,
											"end": 11804,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11787,
											"end": 11804,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 11767,
											"end": 11804,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11767,
											"end": 11804,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 5649,
											"end": 5655,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11829,
											"end": 11855,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 11829,
											"end": 11855,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11829,
											"end": 11855,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11950,
											"end": 11978,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 5649,
											"end": 5655,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP10",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1E"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1036,
											"end": 1079,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 11950,
											"end": 11978,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11950,
											"end": 11978,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 11950,
											"end": 11978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 11950,
											"end": 11978,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 11950,
											"end": 11978,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 11763,
											"end": 12002,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1D"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3467,
											"end": 3479,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4774,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 746,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 736,
											"end": 746,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4774,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4774,
											"end": 4780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CODESIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CODESIZE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "7F"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7736,
											"end": 8573,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 7736,
											"end": 8573,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7736,
											"end": 8573,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7736,
											"end": 8573,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7736,
											"end": 8573,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7867,
											"end": 7885,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7867,
											"end": 7885,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7867,
											"end": 7885,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7946,
											"end": 7962,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7946,
											"end": 7962,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7946,
											"end": 7962,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7883,
											"end": 7884,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8122,
											"end": 8143,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 8122,
											"end": 8143,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8122,
											"end": 8143,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 8122,
											"end": 8143,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 8489,
											"end": 8515,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP8",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "tag",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 1036,
											"end": 1079,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8439,
											"end": 8464,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8439,
											"end": 8464,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 8439,
											"end": 8464,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8439,
											"end": 8464,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 8439,
											"end": 8464,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8489,
											"end": 8515,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 7736,
											"end": 8573,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "616C616E63650000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "6573730000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "6472657373000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 10894,
											"end": 11274,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 10894,
											"end": 11274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11030,
											"end": 11049,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11030,
											"end": 11049,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11030,
											"end": 11049,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11109,
											"end": 11130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11109,
											"end": 11130,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11109,
											"end": 11130,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 11234,
											"end": 11266,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11047,
											"end": 11048,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11182,
											"end": 11193,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11047,
											"end": 11048,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 11047,
											"end": 11048,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11047,
											"end": 11048,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11234,
											"end": 11266,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 10894,
											"end": 11274,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "7373000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 487,
											"end": 668,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 487,
											"end": 668,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 487,
											"end": 668,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 601,
											"end": 607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 601,
											"end": 607,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 487,
											"end": 668,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 487,
											"end": 668,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "1B"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1390,
											"end": 1582,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1390,
											"end": 1582,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1390,
											"end": 1582,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1390,
											"end": 1582,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1390,
											"end": 1582,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 13465,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Metadata.sol",
								"libraries/SafeMath.sol",
								"utils/Context.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"../libraries/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor() {\\r\\n        _name = \\\"SwishFish\\\";\\r\\n        _symbol = \\\"SFH\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender).add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    unchecked {\\r\\n        _approve(owner, spender, currentAllowance.sub(subtractedValue));\\r\\n    }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n        _balances[from] = fromBalance.sub(amount);\\r\\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n        // decrementing then incrementing.\\r\\n        _balances[to] = _balances[to].add(amount);\\r\\n    }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n    unchecked {\\r\\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n    }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = _balances[account].sub(amount);\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply = _totalSupply.sub(amount);\\r\\n        }\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance.sub(amount));\\r\\n        }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x9a8023d613b42d4e4757f8fe75f37be33054ae44be3c966bd77538b9974aeb77\",\"license\":\"MIT\"},\"interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb7aa62de070c259e9466be8b5ac48d4c4fca67521bd05c4debf128739d61c74\",\"license\":\"MIT\"},\"interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x17e11f3a7f387d611d79692f57a12340a2eec6e1dcf096e361723ddfd8a7ec72\",\"license\":\"MIT\"},\"libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x230abde3f0534bbf161e909591a48372dc2809afeece53563b5d7bce2a6d1640\",\"license\":\"MIT\"},\"utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5ad02aef65a10b88cc02acbc001a86c026a0d989e9a9f7817dfe5a88b2f005a4\",\"license\":\"MIT\"}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 19,
								"contract": "contracts/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 25,
								"contract": "contracts/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 27,
								"contract": "contracts/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 29,
								"contract": "contracts/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 31,
								"contract": "contracts/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb7aa62de070c259e9466be8b5ac48d4c4fca67521bd05c4debf128739d61c74\",\"license\":\"MIT\"}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb7aa62de070c259e9466be8b5ac48d4c4fca67521bd05c4debf128739d61c74\",\"license\":\"MIT\"},\"interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x17e11f3a7f387d611d79692f57a12340a2eec6e1dcf096e361723ddfd8a7ec72\",\"license\":\"MIT\"}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libraries/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations.",
						"kind": "dev",
						"methods": {},
						"title": "SafeMath",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libraries/SafeMath.sol\":224:4943  library SafeMath {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"libraries/SafeMath.sol\":224:4943  library SafeMath {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b4047155931071a6528aeef6da4a8135f663f5fe3e8a3efada14c10dac934c3f64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b4047155931071a6528aeef6da4a8135f663f5fe3e8a3efada14c10dac934c3f64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 DIV PUSH18 0x55931071A6528AEEF6DA4A8135F663F5FE3E DUP11 RETURNDATACOPY STATICCALL 0xDA EQ 0xC1 0xD 0xAC SWAP4 0x4C EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "224:4719:3:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220b4047155931071a6528aeef6da4a8135f663f5fe3e8a3efada14c10dac934c3f64736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 DIV PUSH18 0x55931071A6528AEEF6DA4A8135F663F5FE3E DUP11 RETURNDATACOPY STATICCALL 0xDA EQ 0xC1 0xD 0xAC SWAP4 0x4C EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "224:4719:3:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 224,
									"end": 4943,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "ASSIGNIMMUTABLE",
									"source": 3,
									"value": "library_deploy_address"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "RETURN",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 224,
									"end": 4943,
									"name": "REVERT",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b4047155931071a6528aeef6da4a8135f663f5fe3e8a3efada14c10dac934c3f64736f6c63430008110033",
									".code": [
										{
											"begin": 224,
											"end": 4943,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 224,
											"end": 4943,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 224,
											"end": 4943,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20.sol",
								"interfaces/IERC20.sol",
								"interfaces/IERC20Metadata.sol",
								"libraries/SafeMath.sol",
								"utils/Context.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libraries/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x230abde3f0534bbf161e909591a48372dc2809afeece53563b5d7bce2a6d1640\",\"license\":\"MIT\"}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"utils/Context.sol\":\"Context\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5ad02aef65a10b88cc02acbc001a86c026a0d989e9a9f7817dfe5a88b2f005a4\",\"license\":\"MIT\"}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/ERC20.sol": {
				"ast": {
					"absolutePath": "contracts/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							930
						],
						"ERC20": [
							609
						],
						"IERC20": [
							687
						],
						"IERC20Metadata": [
							712
						],
						"SafeMath": [
							908
						]
					},
					"id": 610,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 610,
							"sourceUnit": 931,
							"src": "135:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 610,
							"sourceUnit": 688,
							"src": "167:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Metadata.sol",
							"file": "../interfaces/IERC20Metadata.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 610,
							"sourceUnit": 713,
							"src": "203:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libraries/SafeMath.sol",
							"file": "../libraries/SafeMath.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 610,
							"sourceUnit": 909,
							"src": "247:35:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Context",
										"nameLocations": [
											"1500:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 930,
										"src": "1500:7:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "1500:7:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC20",
										"nameLocations": [
											"1509:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 687,
										"src": "1509:6:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1509:6:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1517:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 712,
										"src": "1517:14:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1517:14:0"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "286:1194:0",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 609,
							"linearizedBaseContracts": [
								609,
								712,
								687,
								930
							],
							"name": "ERC20",
							"nameLocation": "1491:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 15,
									"libraryName": {
										"id": 13,
										"name": "SafeMath",
										"nameLocations": [
											"1545:8:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 908,
										"src": "1545:8:0"
									},
									"nodeType": "UsingForDirective",
									"src": "1539:27:0",
									"typeName": {
										"id": 14,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1558:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 19,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1610:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 609,
									"src": "1574:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 18,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1582:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1574:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 17,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1593:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1684:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 609,
									"src": "1628:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 24,
										"keyType": {
											"id": 20,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1636:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1628:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 23,
											"keyType": {
												"id": 21,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1655:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1647:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 22,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1666:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1720:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 609,
									"src": "1704:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 26,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1704:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 29,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1756:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 609,
									"src": "1741:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 28,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1741:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 31,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1783:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 609,
									"src": "1768:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 30,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1768:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "2125:64:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 35,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "2136:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "537769736846697368",
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2144:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_f68be8422a71ef1830af3c898e131cb4c34a1c11d8da48fb9cdcfe95fb2bbc4c",
															"typeString": "literal_string \"SwishFish\""
														},
														"value": "SwishFish"
													},
													"src": "2136:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "2136:19:0"
											},
											{
												"expression": {
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 39,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 31,
														"src": "2166:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "534648",
														"id": 40,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2176:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_57e62b5e1d08aa47727608e4636dd9ac1fe1ed6c6bfabd35d03c71a8d352957c",
															"typeString": "literal_string \"SFH\""
														},
														"value": "SFH"
													},
													"src": "2166:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "2166:15:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1799:306:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 44,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2122:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2125:0:0"
									},
									"scope": 609,
									"src": "2111:78:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										699
									],
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "2328:31:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 29,
													"src": "2346:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "2339:12:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2197:56:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2268:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 47,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2295:8:0"
									},
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2272:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "2313:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 48,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2313:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2312:15:0"
									},
									"scope": 609,
									"src": "2259:100:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										705
									],
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "2549:33:0",
										"statements": [
											{
												"expression": {
													"id": 61,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 31,
													"src": "2567:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 60,
												"id": 62,
												"nodeType": "Return",
												"src": "2560:14:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "2367:105:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2487:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 57,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2516:8:0"
									},
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2493:2:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2534:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 58,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2534:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2533:15:0"
									},
									"scope": 609,
									"src": "2478:104:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										711
									],
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "3286:28:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3304:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 70,
												"id": 72,
												"nodeType": "Return",
												"src": "3297:9:0"
											}
										]
									},
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2590:625:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3230:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3261:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3238:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "3279:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 68,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:7:0"
									},
									"scope": 609,
									"src": "3221:93:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										636
									],
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "3449:38:0",
										"statements": [
											{
												"expression": {
													"id": 81,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "3467:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 80,
												"id": 82,
												"nodeType": "Return",
												"src": "3460:19:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "3322:51:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3388:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 77,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3422:8:0"
									},
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3399:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "3440:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3440:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3439:9:0"
									},
									"scope": 609,
									"src": "3379:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										644
									],
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "3633:44:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 93,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "3651:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 95,
													"indexExpression": {
														"id": 94,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3661:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3651:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 92,
												"id": 96,
												"nodeType": "Return",
												"src": "3644:25:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "3495:49:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3559:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 89,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3606:8:0"
									},
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3577:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3569:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3569:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3568:17:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "3624:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3624:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3623:9:0"
									},
									"scope": 609,
									"src": "3550:127:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										654
									],
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "3968:108:0",
										"statements": [
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3987:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 122,
														"src": "3979:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 109,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3979:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 113,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 111,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "3995:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3995:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3979:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 115,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "4028:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "4035:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 117,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "4039:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 114,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "4018:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4018:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "4018:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4064:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 108,
												"id": 121,
												"nodeType": "Return",
												"src": "4057:11:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "3685:192:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3892:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 105,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3944:8:0"
									},
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3909:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3901:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3901:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3921:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3913:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3913:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3900:28:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "3962:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3962:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3961:6:0"
									},
									"scope": 609,
									"src": "3883:193:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										664
									],
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "4237:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 134,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 25,
															"src": "4255:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 136,
														"indexExpression": {
															"id": 135,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "4267:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4255:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 138,
													"indexExpression": {
														"id": 137,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "4274:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4255:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 133,
												"id": 139,
												"nodeType": "Return",
												"src": "4248:34:0"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "4084:49:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4148:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 130,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4210:8:0"
									},
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4166:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4158:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4158:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4181:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4173:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4173:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4157:32:0"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "4228:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4228:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4227:9:0"
									},
									"scope": 609,
									"src": "4139:151:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										674
									],
									"body": {
										"id": 165,
										"nodeType": "Block",
										"src": "4699:112:0",
										"statements": [
											{
												"assignments": [
													153
												],
												"declarations": [
													{
														"constant": false,
														"id": 153,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4718:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 165,
														"src": "4710:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 152,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4710:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 156,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 154,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "4726:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4726:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4710:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4758:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 159,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "4765:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 160,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "4774:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 157,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 542,
														"src": "4749:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4749:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "4749:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4799:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 151,
												"id": 164,
												"nodeType": "Return",
												"src": "4792:11:0"
											}
										]
									},
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "4298:306:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4619:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4675:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4635:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4627:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4652:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4644:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4644:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4626:33:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4693:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4693:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4692:6:0"
									},
									"scope": 609,
									"src": "4610:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										686
									],
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "5528:158:0",
										"statements": [
											{
												"assignments": [
													180
												],
												"declarations": [
													{
														"constant": false,
														"id": 180,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5547:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "5539:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 179,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5539:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 183,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 181,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "5557:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5557:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5539:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5596:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 186,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "5602:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 187,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5611:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 184,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 586,
														"src": "5580:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5580:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "5580:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 191,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5639:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 192,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "5645:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 193,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5649:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 190,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 354,
														"src": "5629:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5629:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "5629:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5674:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 178,
												"id": 197,
												"nodeType": "Return",
												"src": "5667:11:0"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4819:566:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5400:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 175,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5504:8:0"
									},
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5431:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5423:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5423:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5454:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5446:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5446:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5475:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5467:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5467:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5412:76:0"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "5522:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5522:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:6:0"
									},
									"scope": 609,
									"src": "5391:295:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 228,
										"nodeType": "Block",
										"src": "6189:147:0",
										"statements": [
											{
												"assignments": [
													210
												],
												"declarations": [
													{
														"constant": false,
														"id": 210,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6208:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 228,
														"src": "6200:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 209,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6200:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 211,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "6216:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6216:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6200:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 215,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 210,
															"src": "6248:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 216,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "6255:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 222,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 204,
																	"src": "6294:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"arguments": [
																		{
																			"id": 218,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 210,
																			"src": "6274:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 219,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 202,
																			"src": "6281:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 217,
																		"name": "allowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 141,
																		"src": "6264:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address,address) view returns (uint256)"
																		}
																	},
																	"id": 220,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6264:25:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6290:3:0",
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 741,
																"src": "6264:29:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6264:41:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 214,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 542,
														"src": "6239:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6239:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "6239:67:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6324:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 208,
												"id": 227,
												"nodeType": "Return",
												"src": "6317:11:0"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "5694:395:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6104:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6130:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6122:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6122:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6147:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6139:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6139:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6121:37:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "6183:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6183:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6182:6:0"
									},
									"scope": 609,
									"src": "6095:241:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 270,
										"nodeType": "Block",
										"src": "6938:328:0",
										"statements": [
											{
												"assignments": [
													240
												],
												"declarations": [
													{
														"constant": false,
														"id": 240,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6957:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 270,
														"src": "6949:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 239,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6949:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 243,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 241,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 920,
														"src": "6965:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6965:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6949:28:0"
											},
											{
												"assignments": [
													245
												],
												"declarations": [
													{
														"constant": false,
														"id": 245,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6996:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 270,
														"src": "6988:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 244,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6988:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 250,
												"initialValue": {
													"arguments": [
														{
															"id": 247,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "7025:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 248,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "7032:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 246,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "7015:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7015:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6988:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 252,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 245,
																"src": "7059:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 253,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 234,
																"src": "7079:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7059:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 255,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7096:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 251,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7051:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7051:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "7051:85:0"
											},
											{
												"id": 267,
												"nodeType": "UncheckedBlock",
												"src": "7143:92:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 259,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "7173:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 260,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 232,
																	"src": "7180:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 263,
																			"name": "subtractedValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 234,
																			"src": "7210:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 261,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 245,
																			"src": "7189:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 262,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7206:3:0",
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 758,
																		"src": "7189:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 264,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7189:37:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 258,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 542,
																"src": "7164:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7164:63:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 266,
														"nodeType": "ExpressionStatement",
														"src": "7164:63:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7254:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 238,
												"id": 269,
												"nodeType": "Return",
												"src": "7247:11:0"
											}
										]
									},
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "6344:489:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6848:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6874:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "6866:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6866:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6891:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "6883:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6883:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6865:42:0"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "6932:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 236,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6932:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6931:6:0"
									},
									"scope": 609,
									"src": "6839:427:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "7848:725:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 282,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 274,
																"src": "7867:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 285,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7883:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 284,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7875:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 283,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7875:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 286,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7875:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7867:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7887:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 281,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7859:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 290,
												"nodeType": "ExpressionStatement",
												"src": "7859:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 292,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "7946:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 295,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7960:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7952:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 293,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7952:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7952:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7946:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7964:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 291,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7938:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7938:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 300,
												"nodeType": "ExpressionStatement",
												"src": "7938:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 302,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8036:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 303,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8042:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 304,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 278,
															"src": "8046:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 301,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "8015:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8015:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 306,
												"nodeType": "ExpressionStatement",
												"src": "8015:38:0"
											},
											{
												"assignments": [
													308
												],
												"declarations": [
													{
														"constant": false,
														"id": 308,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8074:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 353,
														"src": "8066:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 307,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8066:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 312,
												"initialValue": {
													"baseExpression": {
														"id": 309,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "8088:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 311,
													"indexExpression": {
														"id": 310,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 274,
														"src": "8098:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8088:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8066:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 314,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 308,
																"src": "8122:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 315,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 278,
																"src": "8137:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8122:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8145:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 313,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8114:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8114:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 319,
												"nodeType": "ExpressionStatement",
												"src": "8114:72:0"
											},
											{
												"id": 340,
												"nodeType": "UncheckedBlock",
												"src": "8193:279:0",
												"statements": [
													{
														"expression": {
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 320,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "8214:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 322,
																"indexExpression": {
																	"id": 321,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 274,
																	"src": "8224:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8214:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 325,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 278,
																		"src": "8248:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 323,
																		"name": "fromBalance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 308,
																		"src": "8232:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8244:3:0",
																	"memberName": "sub",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 758,
																	"src": "8232:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 326,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8232:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8214:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 328,
														"nodeType": "ExpressionStatement",
														"src": "8214:41:0"
													},
													{
														"expression": {
															"id": 338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 329,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "8423:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 331,
																"indexExpression": {
																	"id": 330,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "8433:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8423:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 336,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 278,
																		"src": "8457:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 332,
																			"name": "_balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 19,
																			"src": "8439:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 334,
																		"indexExpression": {
																			"id": 333,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 276,
																			"src": "8449:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8439:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 335,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8453:3:0",
																	"memberName": "add",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 741,
																	"src": "8439:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8439:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8423:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 339,
														"nodeType": "ExpressionStatement",
														"src": "8423:41:0"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 342,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8498:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 343,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8504:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 344,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 278,
															"src": "8508:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 341,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 621,
														"src": "8489:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8489:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 346,
												"nodeType": "EmitStatement",
												"src": "8484:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 348,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "8548:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 349,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "8554:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 350,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 278,
															"src": "8558:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 347,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 608,
														"src": "8528:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8528:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 352,
												"nodeType": "ExpressionStatement",
												"src": "8528:37:0"
											}
										]
									},
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "7274:456:0",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7745:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7773:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "7765:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7765:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7796:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "7788:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7788:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7817:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "7809:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7809:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7754:76:0"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7848:0:0"
									},
									"scope": 609,
									"src": "7736:837:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 418,
										"nodeType": "Block",
										"src": "8925:507:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 363,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 357,
																"src": "8944:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 366,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8963:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8955:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 364,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8955:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8955:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8944:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 369,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8967:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 362,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8936:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8936:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 371,
												"nodeType": "ExpressionStatement",
												"src": "8936:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9043:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 374,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9035:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 373,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9035:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9035:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 377,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "9047:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 378,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "9056:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 372,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "9014:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9014:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "9014:49:0"
											},
											{
												"expression": {
													"id": 386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 381,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "9076:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 384,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "9108:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 382,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 27,
																"src": "9091:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9104:3:0",
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 741,
															"src": "9091:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 385,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9091:24:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9076:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 387,
												"nodeType": "ExpressionStatement",
												"src": "9076:39:0"
											},
											{
												"id": 399,
												"nodeType": "UncheckedBlock",
												"src": "9122:189:0",
												"statements": [
													{
														"expression": {
															"id": 397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 388,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "9252:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 390,
																"indexExpression": {
																	"id": 389,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 357,
																	"src": "9262:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9252:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 395,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 359,
																		"src": "9296:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 391,
																			"name": "_balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 19,
																			"src": "9273:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 393,
																		"indexExpression": {
																			"id": 392,
																			"name": "account",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 357,
																			"src": "9283:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9273:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9292:3:0",
																	"memberName": "add",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 741,
																	"src": "9273:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9273:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9252:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 398,
														"nodeType": "ExpressionStatement",
														"src": "9252:51:0"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9343:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9335:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 401,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9335:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9335:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 405,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "9347:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 406,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "9356:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 400,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 621,
														"src": "9326:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9326:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 408,
												"nodeType": "EmitStatement",
												"src": "9321:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 412,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9404:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9396:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 410,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9396:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 413,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9396:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 414,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "9408:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 415,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "9417:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 409,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 608,
														"src": "9376:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9376:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "9376:48:0"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "8581:273:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 419,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8869:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8883:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "8875:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8875:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8900:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "8892:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8892:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8874:33:0"
									},
									"returnParameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8925:0:0"
									},
									"scope": 609,
									"src": "8860:572:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 496,
										"nodeType": "Block",
										"src": "9830:626:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 428,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 422,
																"src": "9849:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9868:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9860:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 429,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9860:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9860:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9849:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9872:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 427,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9841:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9841:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 436,
												"nodeType": "ExpressionStatement",
												"src": "9841:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 438,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "9940:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9957:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9949:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 439,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9949:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9949:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "9961:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 437,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "9919:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9919:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 445,
												"nodeType": "ExpressionStatement",
												"src": "9919:49:0"
											},
											{
												"assignments": [
													447
												],
												"declarations": [
													{
														"constant": false,
														"id": 447,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9987:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 496,
														"src": "9979:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9979:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 451,
												"initialValue": {
													"baseExpression": {
														"id": 448,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "10004:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 450,
													"indexExpression": {
														"id": 449,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "10014:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10004:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9979:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 455,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 453,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 447,
																"src": "10041:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 454,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 424,
																"src": "10059:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10041:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10067:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 452,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10033:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10033:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 458,
												"nodeType": "ExpressionStatement",
												"src": "10033:71:0"
											},
											{
												"id": 477,
												"nodeType": "UncheckedBlock",
												"src": "10115:222:0",
												"statements": [
													{
														"expression": {
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 459,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "10140:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 461,
																"indexExpression": {
																	"id": 460,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 422,
																	"src": "10150:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10140:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 466,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 424,
																		"src": "10184:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 462,
																			"name": "_balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 19,
																			"src": "10161:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 464,
																		"indexExpression": {
																			"id": 463,
																			"name": "account",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 422,
																			"src": "10171:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10161:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 465,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10180:3:0",
																	"memberName": "sub",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 758,
																	"src": "10161:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10161:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10140:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 469,
														"nodeType": "ExpressionStatement",
														"src": "10140:51:0"
													},
													{
														"expression": {
															"id": 475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 470,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 27,
																"src": "10286:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 473,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 424,
																		"src": "10318:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 471,
																		"name": "_totalSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 27,
																		"src": "10301:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10314:3:0",
																	"memberName": "sub",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 758,
																	"src": "10301:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10301:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10286:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 476,
														"nodeType": "ExpressionStatement",
														"src": "10286:39:0"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 479,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "10361:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10378:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 481,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10370:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 480,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10370:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 483,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10370:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 484,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "10382:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 478,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 621,
														"src": "10352:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10352:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 486,
												"nodeType": "EmitStatement",
												"src": "10347:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "10420:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10437:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10429:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 489,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10429:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10429:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 493,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "10441:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 487,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 608,
														"src": "10400:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10400:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 495,
												"nodeType": "ExpressionStatement",
												"src": "10400:48:0"
											}
										]
									},
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "9440:319:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9774:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9788:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "9780:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 421,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9780:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9805:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "9797:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9797:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9779:33:0"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9830:0:0"
									},
									"scope": 609,
									"src": "9765:691:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 541,
										"nodeType": "Block",
										"src": "11011:263:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 513,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 508,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 500,
																"src": "11030:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11047:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11039:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 509,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11039:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 512,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11039:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11030:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 514,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11051:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 507,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11022:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11022:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 516,
												"nodeType": "ExpressionStatement",
												"src": "11022:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 518,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 502,
																"src": "11109:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 521,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11128:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 520,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11120:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 519,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11120:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 522,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11120:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11109:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11132:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 517,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11101:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11101:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 526,
												"nodeType": "ExpressionStatement",
												"src": "11101:68:0"
											},
											{
												"expression": {
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 527,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 25,
																"src": "11182:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 530,
															"indexExpression": {
																"id": 528,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 500,
																"src": "11194:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11182:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 531,
														"indexExpression": {
															"id": 529,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "11201:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11182:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 532,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 504,
														"src": "11212:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11182:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 534,
												"nodeType": "ExpressionStatement",
												"src": "11182:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 536,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "11243:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 502,
															"src": "11250:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 538,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 504,
															"src": "11259:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 535,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 630,
														"src": "11234:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11234:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "EmitStatement",
												"src": "11229:37:0"
											}
										]
									},
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "10464:424:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10903:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10930:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "10922:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10922:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10954:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "10946:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10946:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10980:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "10972:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 503,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10972:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10911:82:0"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11011:0:0"
									},
									"scope": 609,
									"src": "10894:380:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 585,
										"nodeType": "Block",
										"src": "11689:320:0",
										"statements": [
											{
												"assignments": [
													553
												],
												"declarations": [
													{
														"constant": false,
														"id": 553,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11708:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 585,
														"src": "11700:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 552,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11700:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 558,
												"initialValue": {
													"arguments": [
														{
															"id": 555,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 545,
															"src": "11737:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 556,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "11744:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 554,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "11727:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11727:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11700:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 559,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 553,
														"src": "11767:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11792:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 561,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11792:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 560,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11787:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11787:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 564,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11801:3:0",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11787:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11767:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 584,
												"nodeType": "IfStatement",
												"src": "11763:239:0",
												"trueBody": {
													"id": 583,
													"nodeType": "Block",
													"src": "11806:196:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 569,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 567,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 553,
																			"src": "11829:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 568,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 549,
																			"src": "11849:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11829:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 570,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11857:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 566,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11821:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 571,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11821:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 572,
															"nodeType": "ExpressionStatement",
															"src": "11821:68:0"
														},
														{
															"id": 582,
															"nodeType": "UncheckedBlock",
															"src": "11900:91:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 574,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 545,
																				"src": "11934:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 575,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 547,
																				"src": "11941:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"arguments": [
																					{
																						"id": 578,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 549,
																						"src": "11971:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 576,
																						"name": "currentAllowance",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 553,
																						"src": "11950:16:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 577,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "11967:3:0",
																					"memberName": "sub",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 758,
																					"src": "11950:20:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 579,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "11950:28:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 573,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 542,
																			"src": "11925:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11925:54:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 581,
																	"nodeType": "ExpressionStatement",
																	"src": "11925:54:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "11282:277:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11574:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11608:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "11600:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11600:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11632:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "11624:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11624:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11658:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "11650:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11650:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11589:82:0"
									},
									"returnParameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11689:0:0"
									},
									"scope": 609,
									"src": "11565:444:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 596,
										"nodeType": "Block",
										"src": "12732:2:0",
										"statements": []
									},
									"documentation": {
										"id": 587,
										"nodeType": "StructuredDocumentation",
										"src": "12017:586:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12618:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12657:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "12649:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12649:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12680:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "12672:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12672:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12701:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "12693:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12638:76:0"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12732:0:0"
									},
									"scope": 609,
									"src": "12609:125:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 607,
										"nodeType": "Block",
										"src": "13460:2:0",
										"statements": []
									},
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "12742:590:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13347:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13385:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "13377:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13377:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13408:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "13400:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13400:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13429:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "13421:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13421:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13366:76:0"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13460:0:0"
									},
									"scope": 609,
									"src": "13338:124:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 610,
							"src": "1482:11983:0",
							"usedErrors": []
						}
					],
					"src": "108:13359:0"
				},
				"id": 0
			},
			"interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							687
						]
					},
					"id": 688,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 611,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 612,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 687,
							"linearizedBaseContracts": [
								687
							],
							"name": "IERC20",
							"nameLocation": "220:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "234:163:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 621,
									"name": "Transfer",
									"nameLocation": "409:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "434:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "418:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "456:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "440:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 619,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "468:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "460:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:57:1"
									},
									"src": "403:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 622,
										"nodeType": "StructuredDocumentation",
										"src": "483:151:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 630,
									"name": "Approval",
									"nameLocation": "646:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "655:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "694:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "678:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 628,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "711:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "703:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 627,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:63:1"
									},
									"src": "640:78:1"
								},
								{
									"documentation": {
										"id": 631,
										"nodeType": "StructuredDocumentation",
										"src": "726:68:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 636,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 632,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:1"
									},
									"returnParameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "846:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:1"
									},
									"scope": 687,
									"src": "800:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "863:74:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 644,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "952:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "970:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "962:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "961:17:1"
									},
									"returnParameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "1002:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1001:9:1"
									},
									"scope": 687,
									"src": "943:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 645,
										"nodeType": "StructuredDocumentation",
										"src": "1019:208:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 654,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1242:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1259:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1251:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1251:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1271:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1263:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1250:28:1"
									},
									"returnParameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1297:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 651,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1297:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:6:1"
									},
									"scope": 687,
									"src": "1233:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "1311:270:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 664,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1596:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1614:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1606:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1629:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1621:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1605:32:1"
									},
									"returnParameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1661:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1661:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1660:9:1"
									},
									"scope": 687,
									"src": "1587:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "1678:655:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2348:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2364:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2356:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2381:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2373:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2373:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:33:1"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2407:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 671,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2407:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2406:6:1"
									},
									"scope": 687,
									"src": "2339:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "2421:295:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 686,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2731:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2762:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "2754:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2785:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "2777:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2777:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2806:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "2798:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2743:76:1"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "2838:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 683,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2838:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2837:6:1"
									},
									"scope": 687,
									"src": "2722:122:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 688,
							"src": "210:2637:1",
							"usedErrors": []
						}
					],
					"src": "109:2740:1"
				},
				"id": 1
			},
			"interfaces/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							687
						],
						"IERC20Metadata": [
							712
						]
					},
					"id": 713,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 689,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:2"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 690,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 713,
							"sourceUnit": 688,
							"src": "140:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 692,
										"name": "IERC20",
										"nameLocations": [
											"316:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 687,
										"src": "316:6:2"
									},
									"id": 693,
									"nodeType": "InheritanceSpecifier",
									"src": "316:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 691,
								"nodeType": "StructuredDocumentation",
								"src": "166:120:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 712,
							"linearizedBaseContracts": [
								712,
								687
							],
							"name": "IERC20Metadata",
							"nameLocation": "298:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 694,
										"nodeType": "StructuredDocumentation",
										"src": "330:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 699,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "401:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "405:2:2"
									},
									"returnParameters": {
										"id": 698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "431:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 696,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "431:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:15:2"
									},
									"scope": 712,
									"src": "392:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "454:58:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 705,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "527:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "533:2:2"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "559:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 702,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "559:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "558:15:2"
									},
									"scope": 712,
									"src": "518:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "582:67:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 711,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "664:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:2"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "698:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 708,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "698:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "697:7:2"
									},
									"scope": 712,
									"src": "655:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 713,
							"src": "288:420:2",
							"usedErrors": []
						}
					],
					"src": "113:597:2"
				},
				"id": 2
			},
			"libraries/SafeMath.sol": {
				"ast": {
					"absolutePath": "libraries/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							908
						]
					},
					"id": 909,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 714,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 715,
								"nodeType": "StructuredDocumentation",
								"src": "137:85:3",
								"text": " @title SafeMath\n @dev Wrappers over Solidity's arithmetic operations."
							},
							"fullyImplemented": true,
							"id": 908,
							"linearizedBaseContracts": [
								908
							],
							"name": "SafeMath",
							"nameLocation": "232:8:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "554:114:3",
										"statements": [
											{
												"assignments": [
													726
												],
												"declarations": [
													{
														"constant": false,
														"id": 726,
														"mutability": "mutable",
														"name": "c",
														"nameLocation": "573:1:3",
														"nodeType": "VariableDeclaration",
														"scope": 740,
														"src": "565:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 725,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "565:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 730,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 727,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "577:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 728,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "581:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "577:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "565:17:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 732,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 726,
																"src": "601:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 733,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "606:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "601:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 735,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "609:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 731,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "593:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "593:46:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 737,
												"nodeType": "ExpressionStatement",
												"src": "593:46:3"
											},
											{
												"expression": {
													"id": 738,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 726,
													"src": "659:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 724,
												"id": 739,
												"nodeType": "Return",
												"src": "652:8:3"
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "248:233:3",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "496:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "508:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "500:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "500:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "519:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "511:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "499:22:3"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "545:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "545:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "544:9:3"
									},
									"scope": 908,
									"src": "487:181:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 757,
										"nodeType": "Block",
										"src": "1018:69:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 752,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "1040:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 753,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 746,
															"src": "1043:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1046:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 751,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															758,
															786
														],
														"referencedDeclaration": 786,
														"src": "1036:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1036:43:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 750,
												"id": 756,
												"nodeType": "Return",
												"src": "1029:50:3"
											}
										]
									},
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "676:269:3",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 758,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "960:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "972:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 758,
												"src": "964:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "964:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "983:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 758,
												"src": "975:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:22:3"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 758,
												"src": "1009:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 748,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1009:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1008:9:3"
									},
									"scope": 908,
									"src": "951:136:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 785,
										"nodeType": "Block",
										"src": "1485:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 773,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 771,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 763,
																"src": "1504:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 772,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 761,
																"src": "1509:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1504:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 774,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "1512:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 770,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1496:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1496:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 776,
												"nodeType": "ExpressionStatement",
												"src": "1496:29:3"
											},
											{
												"assignments": [
													778
												],
												"declarations": [
													{
														"constant": false,
														"id": 778,
														"mutability": "mutable",
														"name": "c",
														"nameLocation": "1544:1:3",
														"nodeType": "VariableDeclaration",
														"scope": 785,
														"src": "1536:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 777,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1536:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 782,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 779,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "1548:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 780,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "1552:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1548:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1536:17:3"
											},
											{
												"expression": {
													"id": 783,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 778,
													"src": "1573:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 769,
												"id": 784,
												"nodeType": "Return",
												"src": "1566:8:3"
											}
										]
									},
									"documentation": {
										"id": 759,
										"nodeType": "StructuredDocumentation",
										"src": "1095:289:3",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 786,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "1399:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1411:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1403:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1403:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1422:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1414:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1414:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "1439:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1425:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 764,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1425:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:50:3"
									},
									"returnParameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1476:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1476:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1475:9:3"
									},
									"scope": 908,
									"src": "1390:192:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 820,
										"nodeType": "Block",
										"src": "1908:404:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 796,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 789,
														"src": "2144:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2149:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2144:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 802,
												"nodeType": "IfStatement",
												"src": "2140:47:3",
												"trueBody": {
													"id": 801,
													"nodeType": "Block",
													"src": "2152:35:3",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2174:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 795,
															"id": 800,
															"nodeType": "Return",
															"src": "2167:8:3"
														}
													]
												}
											},
											{
												"assignments": [
													804
												],
												"declarations": [
													{
														"constant": false,
														"id": 804,
														"mutability": "mutable",
														"name": "c",
														"nameLocation": "2207:1:3",
														"nodeType": "VariableDeclaration",
														"scope": 820,
														"src": "2199:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 803,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2199:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 808,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 805,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 789,
														"src": "2211:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 806,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 791,
														"src": "2215:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2211:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2199:17:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 814,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 812,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 810,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 804,
																	"src": "2235:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 811,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 789,
																	"src": "2239:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2235:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 813,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 791,
																"src": "2244:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2235:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 815,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2247:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 809,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2227:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2227:56:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 817,
												"nodeType": "ExpressionStatement",
												"src": "2227:56:3"
											},
											{
												"expression": {
													"id": 818,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 804,
													"src": "2303:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 795,
												"id": 819,
												"nodeType": "Return",
												"src": "2296:8:3"
											}
										]
									},
									"documentation": {
										"id": 787,
										"nodeType": "StructuredDocumentation",
										"src": "1590:245:3",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "1850:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1862:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1854:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1873:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1865:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1865:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1853:22:3"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1899:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1899:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1898:9:3"
									},
									"scope": 908,
									"src": "1841:471:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "2855:65:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 832,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 824,
															"src": "2877:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 833,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 826,
															"src": "2880:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 834,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2883:28:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 831,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															838,
															866
														],
														"referencedDeclaration": 866,
														"src": "2873:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2873:39:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 830,
												"id": 836,
												"nodeType": "Return",
												"src": "2866:46:3"
											}
										]
									},
									"documentation": {
										"id": 822,
										"nodeType": "StructuredDocumentation",
										"src": "2320:462:3",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 838,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "2797:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2809:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "2801:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2801:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2820:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "2812:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2812:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2800:22:3"
									},
									"returnParameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "2846:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2846:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2845:9:3"
									},
									"scope": 908,
									"src": "2788:132:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 865,
										"nodeType": "Block",
										"src": "3511:183:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 853,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 851,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 843,
																"src": "3530:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 852,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3534:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3530:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 854,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "3537:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 850,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3522:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3522:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 856,
												"nodeType": "ExpressionStatement",
												"src": "3522:28:3"
											},
											{
												"assignments": [
													858
												],
												"declarations": [
													{
														"constant": false,
														"id": 858,
														"mutability": "mutable",
														"name": "c",
														"nameLocation": "3569:1:3",
														"nodeType": "VariableDeclaration",
														"scope": 865,
														"src": "3561:9:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 857,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3561:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 862,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 859,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 841,
														"src": "3573:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 860,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 843,
														"src": "3577:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3573:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3561:17:3"
											},
											{
												"expression": {
													"id": 863,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 858,
													"src": "3685:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 849,
												"id": 864,
												"nodeType": "Return",
												"src": "3678:8:3"
											}
										]
									},
									"documentation": {
										"id": 839,
										"nodeType": "StructuredDocumentation",
										"src": "2928:482:3",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 866,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3425:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3437:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "3429:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3429:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3448:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "3440:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3440:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3465:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "3451:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 844,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3451:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3428:50:3"
									},
									"returnParameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "3502:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 847,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3502:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3501:9:3"
									},
									"scope": 908,
									"src": "3416:278:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 882,
										"nodeType": "Block",
										"src": "4226:63:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 877,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 869,
															"src": "4248:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 878,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "4251:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 879,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4254:26:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 876,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															883,
															907
														],
														"referencedDeclaration": 907,
														"src": "4244:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4244:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 875,
												"id": 881,
												"nodeType": "Return",
												"src": "4237:44:3"
											}
										]
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "3702:451:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 883,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4168:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4180:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "4172:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4172:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4191:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "4183:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4183:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4171:22:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "4217:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4217:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4216:9:3"
									},
									"scope": 908,
									"src": "4159:130:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "4869:71:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 896,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 888,
																"src": "4888:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 897,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4893:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4888:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 899,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 890,
															"src": "4896:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 895,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4880:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4880:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 901,
												"nodeType": "ExpressionStatement",
												"src": "4880:29:3"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 902,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 886,
														"src": "4927:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 903,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "4931:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4927:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 894,
												"id": 905,
												"nodeType": "Return",
												"src": "4920:12:3"
											}
										]
									},
									"documentation": {
										"id": 884,
										"nodeType": "StructuredDocumentation",
										"src": "4297:471:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4783:3:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4795:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "4787:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 885,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4787:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4806:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "4798:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4823:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "4809:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 889,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4809:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4786:50:3"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "4860:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:9:3"
									},
									"scope": 908,
									"src": "4774:166:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 909,
							"src": "224:4719:3",
							"usedErrors": []
						}
					],
					"src": "110:4835:3"
				},
				"id": 3
			},
			"utils/Context.sol": {
				"ast": {
					"absolutePath": "utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							930
						]
					},
					"id": 931,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 910,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 911,
								"nodeType": "StructuredDocumentation",
								"src": "116:505:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 930,
							"linearizedBaseContracts": [
								930
							],
							"name": "Context",
							"nameLocation": "641:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 919,
										"nodeType": "Block",
										"src": "718:36:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 916,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "736:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "740:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "736:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 915,
												"id": 918,
												"nodeType": "Return",
												"src": "729:17:4"
											}
										]
									},
									"id": 920,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 930,
									"src": "656:98:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 928,
										"nodeType": "Block",
										"src": "829:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 925,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "847:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "851:4:4",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "847:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 924,
												"id": 927,
												"nodeType": "Return",
												"src": "840:15:4"
											}
										]
									},
									"id": 929,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "771:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:2:4"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "813:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 922,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "813:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:16:4"
									},
									"scope": 930,
									"src": "762:101:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 931,
							"src": "623:243:4",
							"usedErrors": []
						}
					],
					"src": "89:779:4"
				},
				"id": 4
			}
		}
	}
}