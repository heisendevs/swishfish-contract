{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ApproveProposal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DepositProposal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "RevokeProposal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "SubmitProposal",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "proposals",
				"outputs": [
					{
						"internalType": "address",
						"name": "author",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "executed",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "updateSalesStatus",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "salesEnabled",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "swapAndAddLiquidity",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "updateWithdrawOptions",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "withdrawPrice",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "updateTaxesFees",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "heisenVerseTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "marketingTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "teamTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidityTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "transferBackend",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "backendAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"utils/MultiSignature.sol": "MultiSignature"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs",
			"useLiteralContent": true
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"utils/MultiSignature.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n// Coin2Fish Contract (utils/MultiSigWallet.sol)\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract MultiSignature {\r\n    event DepositProposal(address indexed sender, uint amount);\r\n    event SubmitProposal(uint indexed proposalId);\r\n    event ApproveProposal(address indexed owner, uint indexed proposalId);\r\n    event RevokeProposal(address indexed owner, uint indexed proposalId);\r\n\r\n    struct Proposal {\r\n        address author;\r\n        bool executed;\r\n        bool updateSalesStatus;\r\n        bool salesEnabled;\r\n        bool swapAndAddLiquidity;\r\n        bool updateWithdrawOptions;\r\n        uint256 withdrawPrice;\r\n        bool updateTaxesFees;\r\n        uint256 heisenVerseTaxFee;\r\n        uint256 marketingTaxFee;\r\n        uint256 teamTaxFee;\r\n        uint256 liquidityTaxFee;\r\n        bool transferBackend;\r\n        address backendAddress;\r\n    }\r\n\r\n    Proposal[] public proposals;\r\n\r\n    mapping(uint => mapping(address => bool)) internal proposalApproved;\r\n    constructor() {}\r\n\r\n    modifier proposalExists(uint _proposalId) {\r\n        require(_proposalId < proposals.length, \"MultiSignatureWallet: proposal does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier proposalNotApproved(uint _proposalId) {\r\n        require(!proposalApproved[_proposalId][msg.sender], \"MultiSignatureWallet: proposal already was approved by owner\");\r\n        _;\r\n    }\r\n\r\n    modifier proposalNotExecuted(uint _proposalId) {\r\n        require(!proposals[_proposalId].executed, \"MultiSignatureWallet: proposal was already executed\");\r\n        _;\r\n    }\r\n}\r\n",
			"keccak256": "0xdc5e99ad2cb681bef03489d4a1724ea612944d73f9a371ad04e1b0535c2e1f46",
			"license": "MIT"
		}
	},
	"version": 1
}