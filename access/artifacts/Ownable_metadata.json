{
	"compiler": {
		"version": "0.8.15+commit.e14f2714"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ApproveProposal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DepositProposal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "RevokeProposal",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "SubmitProposal",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "proposals",
				"outputs": [
					{
						"internalType": "address",
						"name": "author",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "executed",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "updateSalesStatus",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "salesEnabled",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "swapAndAddLiquidity",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "updateWithdrawOptions",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "withdrawPrice",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "updateTaxesFees",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "heisenVerseTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "marketingTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "teamTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidityTaxFee",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "transferBackend",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "backendAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Initializes the contract setting the deployer as the initial owner."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"access/Ownable.sol": "Ownable"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs",
			"useLiteralContent": true
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"access/Ownable.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n// Coin2Fish Contract (access/Ownable.sol)\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"../utils/Context.sol\";\r\nimport \"../utils/MultiSignature.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context, MultiSignature {\r\n    address private _backend;\r\n    address private _owner;\r\n    address[] private _owners;\r\n    mapping(address => bool) private isOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    function requiredConfirmations() internal view returns (uint256) {\r\n        return _owners.length;\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current backend.\r\n     */\r\n    function backend() internal view returns (address) {\r\n        return _backend;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner[_msgSender()],  \"Ownable: caller is not an owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyBackend() {\r\n        require(backend() == _msgSender(), \"Ownable: caller is not the backend\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if account is an owner.\r\n     */\r\n    function isAnOwner(address account) internal view returns (bool) {\r\n        return isOwner[account];\r\n    }\r\n    /**\r\n     * @dev Returns owner by Index.\r\n     */\r\n    function getOwner(uint256 index) internal view returns (address) {\r\n        return _owners[index];\r\n    }\r\n    /**\r\n     * @dev Transfers backend Control of the contract to a new account (`newBackend`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function _transferBackend(address newBackend) internal  {\r\n        require(newBackend != address(0), \"Ownable: new owner is the zero address\");\r\n        _backend = newBackend;\r\n        emit OwnershipTransferred(address(0), newBackend);\r\n    }\r\n    /**\r\n     * @dev Set owners of the contract\r\n     * Is Only called in the contract creation\r\n     */\r\n    function _addOwner(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: Owner is the zero address\");\r\n        require(!isOwner[newOwner], \"Ownable: Owner is not unique\");\r\n        isOwner[newOwner] = true;\r\n        _owners.push(newOwner);\r\n        emit OwnershipTransferred(address(0), newOwner);\r\n    }\r\n}\r\n",
			"keccak256": "0x3d3f04a60c04972e7be54ba49c5508105b47dabc11d100ddc2a3368c0587c2a9",
			"license": "MIT"
		},
		"utils/Context.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity 0.8.15;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n",
			"keccak256": "0xbff08ae0f5d4b586d588f19d946eb5efd8f9a18a7108b9db792c5e06d10ae2bf",
			"license": "MIT"
		},
		"utils/MultiSignature.sol": {
			"content": "// SPDX-License-Identifier: MIT\r\n// Coin2Fish Contract (utils/MultiSigWallet.sol)\r\n\r\npragma solidity 0.8.15;\r\n\r\ncontract MultiSignature {\r\n    event DepositProposal(address indexed sender, uint amount);\r\n    event SubmitProposal(uint indexed proposalId);\r\n    event ApproveProposal(address indexed owner, uint indexed proposalId);\r\n    event RevokeProposal(address indexed owner, uint indexed proposalId);\r\n\r\n    struct Proposal {\r\n        address author;\r\n        bool executed;\r\n        bool updateSalesStatus;\r\n        bool salesEnabled;\r\n        bool swapAndAddLiquidity;\r\n        bool updateWithdrawOptions;\r\n        uint256 withdrawPrice;\r\n        bool updateTaxesFees;\r\n        uint256 heisenVerseTaxFee;\r\n        uint256 marketingTaxFee;\r\n        uint256 teamTaxFee;\r\n        uint256 liquidityTaxFee;\r\n        bool transferBackend;\r\n        address backendAddress;\r\n    }\r\n\r\n    Proposal[] public proposals;\r\n\r\n    mapping(uint => mapping(address => bool)) internal proposalApproved;\r\n    constructor() {}\r\n\r\n    modifier proposalExists(uint _proposalId) {\r\n        require(_proposalId < proposals.length, \"MultiSignatureWallet: proposal does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier proposalNotApproved(uint _proposalId) {\r\n        require(!proposalApproved[_proposalId][msg.sender], \"MultiSignatureWallet: proposal already was approved by owner\");\r\n        _;\r\n    }\r\n\r\n    modifier proposalNotExecuted(uint _proposalId) {\r\n        require(!proposals[_proposalId].executed, \"MultiSignatureWallet: proposal was already executed\");\r\n        _;\r\n    }\r\n}\r\n",
			"keccak256": "0x170c62536c9215e255236f7df6d8ae308819c3448a2700c48fc3732c6c793d0e",
			"license": "MIT"
		}
	},
	"version": 1
}