{
  "language": "Solidity",
  "sources": {
    "/contracts/SwishFishToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// SwishFish Contract (SwishFishToken.sol)\n\npragma solidity 0.8.16;\n\nimport \"./contracts/ERC20.sol\";\nimport \"./access/Ownable.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\n/**\n * @title SwishFish Contract for SwishFish Token\n * @author HeisenDev\n */\ncontract SwishFish is ERC20, Ownable {\n    using SafeMath for uint256;\n    IUniswapV2Router02 public uniswapV2Router;\n    IUniswapV2Pair public uniswapV2PairHSF;\n    IUniswapV2Pair public uniswapV2PairBUSD;\n\n    /**\n     * Definition of the token parameters\n     */\n    uint private _tokenTotalSupply = 100000000 * 10 ** 18;\n\n    bool public salesEnabled = false;\n    bool private firstLiquidityEnabled = true;\n\n    /**\n     * Definition Withdrawals params\n     * `_totalInvestment` Corresponds to the total investment\n     * `_accountWithdrawalLast` Corresponds to date of the last withdraw\n     * `_accountWithdrawalCount` Corresponds to the count of withdrawals in the last 24 hours\n     * `_maxTransactionWithdrawAmount` Corresponds to the amount of claim based on deposits\n     * `_roi` min days to get Return Of Investment\n     * `_maxWithdrawalCount` Max Withdrawals per day\n     */\n    mapping(address => uint256) private _totalInvestment;\n    mapping(address => uint256) private _accountWithdrawalLast;\n    mapping(address => uint256) private _accountWithdrawalCount;\n    mapping(address => uint256) public _maxTransactionWithdrawAmount;\n    address public paymentToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n    uint256 private _roi = 20;\n    uint256 private _maxWithdrawalCount = 1;\n    address [] public _players;\n\n\n    /**\n     * Definition of the Project Wallets\n     * `addressHeisenverse` Corresponds to the wallet address where the development\n     * team will receive their payments\n     * `addressMarketing` Corresponds to the wallet address where the funds\n     * for marketing will be received\n     * `addressTeam` Represents the wallet where teams and other\n     * collaborators will receive their payments\n     */\n    address payable public addressPriceKeeper = payable(0x34390458758b6eFaAC5680fBEAb8DE17F2951Ad0);\n    address payable public addressHeisenverse = payable(0xEDa73409d4bBD147f4E1295A73a2Ca243a529338);\n    address payable public addressMarketing = payable(0x3c1Cd83D8850803C9c42fF5083F56b66b00FBD61);\n    address payable public addressTeam = payable(0x63024aC73FE77427F20e8247FA26F470C0D9700B);\n\n    /**\n     * Definition of the taxes fees for swaps\n     * `taxFeeHeisenverse` 2%  Initial tax fee during presale\n     * `taxFeeMarketing` 3%  Initial tax fee during presale\n     * `taxFeeTeam` 3%  Initial tax fee during presale\n     * `taxFeeLiquidity` 2%  Initial tax fee during presale\n     * This value can be modified by the method {updateTaxesFees}\n     */\n    uint256 public taxFeeHeisenverse = 2;\n    uint256 public taxFeeMarketing = 3;\n    uint256 public taxFeeTeam = 3;\n    uint256 public taxFeeLiquidity = 2;\n\n    /**\n     * Definition of pools\n     * `_poolHeisenverse`\n     * `_poolMarketing`\n     * `_poolTeam`\n     * `_poolLiquidity`\n     */\n    uint256 public _poolHeisenverse = 0;\n    uint256 public _poolMarketing = 0;\n    uint256 public _poolTeam = 0;\n    uint256 public _poolLiquidity = 0;\n\n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) private _isAllowedContract;\n    mapping(address => bool) private automatedMarketMakerPairs;\n\n    event Deposit(address indexed sender, uint amount);\n    event Buy(address indexed sender, uint amount, uint eth);\n    event SalesState(bool status);\n    event Withdraw(address indexed sender, uint amount);\n    event TeamPayment(uint amount);\n    event FirstLiquidity(address indexed sender, uint amount, uint256 bnb);\n    event Liquidity(address indexed sender, uint amount, uint256 bnb);\n    event UpdateTaxesFees(\n        uint256 taxFeeHeisenverse,\n        uint256 taxFeeMarketing,\n        uint256 taxFeeTeam,\n        uint256 taxFeeLiquidity\n    );\n    constructor(address _owner1, address _owner2, address _owner3, address _backend) {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2PairHSF = IUniswapV2Pair(_uniswapV2Pair);\n        uniswapV2PairBUSD = IUniswapV2Pair(0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16);\n\n        automatedMarketMakerPairs[_uniswapV2Pair] = true;\n        _isAllowedContract[_uniswapV2Pair] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[addressHeisenverse] = true;\n        _isExcludedFromFees[addressMarketing] = true;\n        _isExcludedFromFees[addressTeam] = true;\n\n        /*\n            _setOwners is an internal function in Ownable.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _addOwner(_owner1);\n        _addOwner(_owner2);\n        _addOwner(_owner3);\n        /*\n            _transferBackend is an internal function in Ownable.sol\n        */\n        _transferBackend(_backend);\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(address(this), (_tokenTotalSupply * 95 / 100));\n        _mint(addressPriceKeeper, _tokenTotalSupply * 5 / 100);\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    receive() external payable {\n        if (msg.value > 0) {\n            emit Deposit(_msgSender(), msg.value);\n        }\n    }\n\n    function buy(uint256 amount) external payable {\n        require(salesEnabled, \"Presale isn't enabled\");\n        uint256 liquidityTokens = balanceOf(address(this)).mul(10).div(100);\n        addLiquidity(liquidityTokens, msg.value);\n        emit Buy(_msgSender(), amount, msg.value);\n    }\n    function firstLiquidity(uint256 priceWei_) external payable onlyOwner {\n        require(firstLiquidityEnabled, \"First liquidity was executed\");\n        (uint256 _bnb1, uint256 _busd1, ) = uniswapV2PairBUSD.getReserves();\n        uint256 price_bnb_to_busd = _busd1 / _bnb1;\n        uint256 tokens = msg.value * price_bnb_to_busd / (priceWei_ / (1 * 10 ** 18));\n        firstLiquidityEnabled = false;\n        addLiquidity(tokens, msg.value);\n        emit FirstLiquidity(_msgSender(), tokens, msg.value);\n    }\n    function teamPayment() external onlyOwner {\n        super._transfer(address(this), addressHeisenverse, _poolHeisenverse);\n        super._transfer(address(this), addressMarketing, _poolMarketing);\n        super._transfer(address(this), addressTeam, _poolTeam);\n        uint256 amount = _poolHeisenverse + _poolMarketing + _poolTeam;\n        _poolHeisenverse = 0;\n        _poolMarketing = 0;\n        _poolTeam = 0;\n        (bool sent, ) = addressHeisenverse.call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send BNB\");\n        emit TeamPayment(amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        if (to == backend()) {\n            (uint256 _hsf0, uint256 _bnb0, ) = uniswapV2PairHSF.getReserves();\n            uint256 price_hsf_to_bnb = _bnb0 / _hsf0;\n            (uint256 _bnb1, uint256 _busd1, ) = uniswapV2PairBUSD.getReserves();\n            uint256 price_bnb_to_busd = _busd1 / _bnb1;\n            _maxTransactionWithdrawAmount[_msgSender()] += amount * price_hsf_to_bnb  * price_bnb_to_busd / _roi;\n            _totalInvestment[from] += amount * price_hsf_to_bnb  * price_bnb_to_busd;\n        }\n        bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\n        if(automatedMarketMakerPairs[from] && isContract(to) && !_isAllowedContract[to]) {\n            super._transfer(from, to, amount);\n            super._transfer(to, addressPriceKeeper, amount);\n        }\n        else {\n            if (takeFee && automatedMarketMakerPairs[from]) {\n                uint256 heisenverseAmount = amount.mul(taxFeeHeisenverse).div(100);\n                uint256 marketingAmount = amount.mul(taxFeeMarketing).div(100);\n                uint256 teamAmount = amount.mul(taxFeeTeam).div(100);\n                uint256 liquidityAmount = amount.mul(taxFeeLiquidity).div(100);\n\n                _poolHeisenverse = _poolHeisenverse.add(heisenverseAmount);\n                _poolMarketing = _poolMarketing.add(marketingAmount);\n                _poolTeam = _poolTeam.add(teamAmount);\n                _poolLiquidity = _poolLiquidity.add(liquidityAmount);\n            }\n            super._transfer(from, to, amount);\n        }\n    }\n    function isContract(address addr) internal view returns (bool) {\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        bytes32 codeHash;\n        assembly {\n            codeHash := extcodehash(addr)\n        }\n        return (codeHash != 0x0 && codeHash != accountHash);\n    }\n\n    function updateTaxesFees(uint256 _heisenVerseTaxFee, uint256 _marketingTaxFee, uint256 _teamTaxFee, uint256 _liquidityTaxFee) private {\n        taxFeeHeisenverse = _heisenVerseTaxFee;\n        taxFeeMarketing = _marketingTaxFee;\n        taxFeeTeam = _teamTaxFee;\n        taxFeeLiquidity = _liquidityTaxFee;\n        emit UpdateTaxesFees(_heisenVerseTaxFee, _marketingTaxFee, _teamTaxFee, _liquidityTaxFee);\n    }\n\n    function updateSalesStatus(bool _salesEnabled) private {\n        salesEnabled = _salesEnabled;\n        emit SalesState(_salesEnabled);\n    }\n\n    function addLiquidity(uint256 tokens, uint256 bnb) private {\n        _approve(address(this), address(uniswapV2Router), balanceOf(address(this)));\n        uniswapV2Router.addLiquidityETH{value : bnb}(\n            address(this),\n            tokens,\n            0,\n            0,\n            address(this),\n            block.timestamp.add(300)\n        );\n        emit Liquidity(_msgSender(), tokens, msg.value);\n    }\n\n    function withdrawAllowance(address account) external view returns (uint256) {\n        return _totalInvestment[account];\n    }\n\n    function isUnderDailyWithdrawalLimit(address account) internal returns (bool) {\n        if (block.timestamp > _accountWithdrawalLast[account].add(86400)) {\n            _accountWithdrawalLast[account] = block.timestamp;\n            _accountWithdrawalCount[account] = 0;\n        }\n        _accountWithdrawalCount[account] = _accountWithdrawalCount[account].add(1);\n        return (_accountWithdrawalCount[account] <= _maxWithdrawalCount);\n    }\n\n    function withdraw(bytes memory signature, uint256 amount, uint256 timestamp) external payable {\n        require(isClaimAuthorized(signature, amount, timestamp), \"Withdraw: Not authorized\");\n        require(isUnderDailyWithdrawalLimit(_msgSender()), \"Withdraw: You cannot make more than one withdrawal per day\");\n        if(_maxTransactionWithdrawAmount[_msgSender()] == 0) {\n            _maxTransactionWithdrawAmount[_msgSender()] = 30 ether;\n        }\n        require(_maxTransactionWithdrawAmount[_msgSender()] > amount, \"Withdraw: User hasn't required allowance\");\n\n        (uint256 _bnb1, uint256 _busd1, ) = uniswapV2PairBUSD.getReserves();\n        uint256 price_bnb_to_busd = _busd1 / _bnb1;\n        uint256 tax =  amount / (price_bnb_to_busd * 10);\n        require(msg.value > tax, \"Withdraw: Require Tax 10% \");\n        IERC20 payment = IERC20(paymentToken);\n        payment.transfer(_msgSender(), amount);\n        emit Withdraw(_msgSender(), amount);\n    }\n\n    function submitProposal(\n        bool _updateEggSales,\n        bool _salesEnabled,\n        bool _updateTaxesFees,\n        uint256 _heisenVerseTaxFee,\n        uint256 _marketingTaxFee,\n        uint256 _teamTaxFee,\n        uint256 _liquidityTaxFee,\n        bool _transferBackend,\n        address _backendAddress\n    ) external onlyOwner {\n        if (_updateTaxesFees) {\n            uint256 sellTotalFees = _heisenVerseTaxFee + _marketingTaxFee + _teamTaxFee + _liquidityTaxFee;\n            require(sellTotalFees <= 10, \"MultiSignatureWallet: Must keep fees at 10% or less\");\n        }\n        if (_transferBackend) {\n            require(_backendAddress != address(0), \"MultiSignatureWallet: new owner is the zero address\");\n        }\n        proposals.push(Proposal({\n        author: _msgSender(),\n        executed: false,\n        updateSalesStatus: _updateEggSales,\n        salesEnabled: _salesEnabled,\n        updateTaxesFees: _updateTaxesFees,\n        heisenVerseTaxFee: _heisenVerseTaxFee,\n        marketingTaxFee: _marketingTaxFee,\n        teamTaxFee: _teamTaxFee,\n        liquidityTaxFee: _liquidityTaxFee,\n        transferBackend: _transferBackend,\n        backendAddress: _backendAddress\n        }));\n        emit SubmitProposal(proposals.length - 1);\n    }\n\n    function approveProposal(uint _proposalId) external onlyOwner proposalExists(_proposalId) proposalNotApproved(_proposalId) proposalNotExecuted(_proposalId)\n    {\n        proposalApproved[_proposalId][_msgSender()] = true;\n        emit ApproveProposal(_msgSender(), _proposalId);\n    }\n\n    function _getApprovalCount(uint _proposalId) private view returns (uint256) {\n        uint256 count = 0;\n        for (uint i; i < requiredConfirmations(); i++) {\n            if (proposalApproved[_proposalId][getOwner(i)]) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n\n    function executeProposal(uint _proposalId) external proposalExists(_proposalId) proposalNotExecuted(_proposalId) {\n        require(_getApprovalCount(_proposalId) >= requiredConfirmations(), \"MultiSignatureWallet: approvals is less than required\");\n        Proposal storage proposal = proposals[_proposalId];\n        proposal.executed = true;\n        if (proposal.updateSalesStatus) {\n            updateSalesStatus(proposal.salesEnabled);\n        }\n        if (proposal.updateTaxesFees) {\n            updateTaxesFees(proposal.heisenVerseTaxFee ,proposal.marketingTaxFee ,proposal.teamTaxFee ,proposal.liquidityTaxFee);\n        }\n        if (proposal.transferBackend) {\n            _transferBackend(proposal.backendAddress);\n        }\n    }\n    function allowContract(address contractAddress_, bool allowed_) external onlyOwner{\n        _isAllowedContract[contractAddress_] = allowed_;\n    }\n    function revokeProposal(uint _proposalId) external onlyOwner proposalExists(_proposalId) proposalNotExecuted(_proposalId)\n    {\n        require(proposalApproved[_proposalId][_msgSender()], \"MultiSignatureWallet: Proposal is not approved\");\n        proposalApproved[_proposalId][_msgSender()] = false;\n        emit RevokeProposal(_msgSender(), _proposalId);\n    }\n\n    function isClaimAuthorized(bytes memory signature, uint256 amount, uint256 timestamp) internal view returns (bool) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\n        bytes32 base_message = keccak256(abi.encodePacked(amount,timestamp));\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked( \"\\x19Ethereum Signed Message:\\n32\" , base_message ));\n        address signer = ecrecover(prefixedHashMessage, v, r, s);\n        if (signer == backend()) {\n            return true;\n        }\n        return false;\n    }\n    function splitSignature(bytes memory sig) public pure returns (bytes32 r, bytes32 s, uint8 v) {\n        require(sig.length == 65, \"invalid signature length\");\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }\n}\n"
    },
    "/contracts/utils/MultiSignature.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Coin2Fish Contract (utils/MultiSigWallet.sol)\n\npragma solidity 0.8.16;\n\ncontract MultiSignature {\n    event DepositProposal(address indexed sender, uint amount);\n    event SubmitProposal(uint indexed proposalId);\n    event ApproveProposal(address indexed owner, uint indexed proposalId);\n    event RevokeProposal(address indexed owner, uint indexed proposalId);\n\n    struct Proposal {\n        address author;\n        bool executed;\n        bool updateSalesStatus;\n        bool salesEnabled;\n        bool updateTaxesFees;\n        uint256 heisenVerseTaxFee;\n        uint256 marketingTaxFee;\n        uint256 teamTaxFee;\n        uint256 liquidityTaxFee;\n        bool transferBackend;\n        address backendAddress;\n    }\n\n    Proposal[] public proposals;\n\n    mapping(uint => mapping(address => bool)) internal proposalApproved;\n    constructor() {}\n\n    modifier proposalExists(uint _proposalId) {\n        require(_proposalId < proposals.length, \"MultiSignatureWallet: proposal does not exist\");\n        _;\n    }\n\n    modifier proposalNotApproved(uint _proposalId) {\n        require(!proposalApproved[_proposalId][msg.sender], \"MultiSignatureWallet: proposal already was approved by owner\");\n        _;\n    }\n\n    modifier proposalNotExecuted(uint _proposalId) {\n        require(!proposals[_proposalId].executed, \"MultiSignatureWallet: proposal was already executed\");\n        _;\n    }\n}\n"
    },
    "/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity 0.8.16;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "/contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity 0.8.16;\n\n/**\n * @title SafeMath\n * @dev Wrappers over Solidity's arithmetic operations.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.16;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.16;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.16;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.16;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity 0.8.16;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.16;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "/contracts/contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity 0.8.16;\n\nimport \"../utils/Context.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../libraries/SafeMath.sol\";\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    constructor() {\n        _name = \"SwishFish\";\n        _symbol = \"HSF\";\n    }\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender).add(addedValue));\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance.sub(subtractedValue));\n        }\n        return true;\n    }\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        _beforeTokenTransfer(from, to, amount);\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance.sub(amount);\n            _balances[to] = _balances[to].add(amount);\n        }\n        emit Transfer(from, to, amount);\n        _afterTokenTransfer(from, to, amount);\n    }\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        unchecked {\n            _balances[account] = _balances[account].add(amount);\n        }\n        emit Transfer(address(0), account, amount);\n        _afterTokenTransfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _beforeTokenTransfer(account, address(0), amount);\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = _balances[account].sub(amount);\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply = _totalSupply.sub(amount);\n        }\n        emit Transfer(account, address(0), amount);\n        _afterTokenTransfer(account, address(0), amount);\n    }\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n        unchecked {\n            _approve(owner, spender, currentAllowance.sub(amount));\n        }\n        }\n    }\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Coin2Fish Contract (access/Ownable.sol)\n\npragma solidity 0.8.16;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/MultiSignature.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context, MultiSignature {\n    address private _backend;\n    address private _owner;\n    address[] private _owners;\n    mapping(address => bool) private isOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    function requiredConfirmations() internal view returns (uint256) {\n        return _owners.length;\n    }\n    /**\n     * @dev Returns the address of the current backend.\n     */\n    function backend() internal view returns (address) {\n        return _backend;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner[_msgSender()],  \"Ownable: caller is not an owner\");\n        _;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyBackend() {\n        require(backend() == _msgSender(), \"Ownable: caller is not the backend\");\n        _;\n    }\n\n    /**\n     * @dev Throws if account is an owner.\n     */\n    function isAnOwner(address account) internal view returns (bool) {\n        return isOwner[account];\n    }\n    /**\n     * @dev Returns owner by Index.\n     */\n    function getOwner(uint256 index) internal view returns (address) {\n        return _owners[index];\n    }\n    /**\n     * @dev Transfers backend Control of the contract to a new account (`newBackend`).\n     * Can only be called by the current owner.\n     */\n    function _transferBackend(address newBackend) internal  {\n        require(newBackend != address(0), \"Ownable: new owner is the zero address\");\n        _backend = newBackend;\n        emit OwnershipTransferred(address(0), newBackend);\n    }\n    /**\n     * @dev Set owners of the contract\n     * Is Only called in the contract creation\n     */\n    function _addOwner(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: Owner is the zero address\");\n        require(!isOwner[newOwner], \"Ownable: Owner is not unique\");\n        isOwner[newOwner] = true;\n        _owners.push(newOwner);\n        emit OwnershipTransferred(address(0), newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "metadata": {
      "useLiteralContent": true,
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "constantinople"
  }
}
